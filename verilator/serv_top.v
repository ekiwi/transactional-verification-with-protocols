/* Generated by Yosys 0.9+932 (git sha1 2ed2e9c3, clang 8.0.0 -fPIC -Os) */

(* src = "serv/rtl/serv_ctrl.v:2" *)
module \$paramod\serv_ctrl\RESET_PC=8 (clk, i_rst, i_en, i_pc_en, i_cnt, i_cnt_r, i_cnt_done, i_jump, i_offset, i_rs1, i_jalr, i_jal_or_jalr, i_utype, i_lui, i_trap, i_csr_pc, o_rd, o_bad_pc, o_misalign, o_ibus_adr, o_ibus_cyc, i_ibus_ack);
  (* src = "serv/rtl/serv_ctrl.v:90" *)
  wire _00_;
  (* src = "serv/rtl/serv_ctrl.v:90" *)
  wire _01_;
  (* src = "serv/rtl/serv_ctrl.v:71" *)
  wire _02_;
  (* src = "serv/rtl/serv_ctrl.v:72" *)
  wire _03_;
  (* src = "serv/rtl/serv_ctrl.v:72" *)
  wire _04_;
  (* src = "serv/rtl/serv_ctrl.v:93" *)
  wire _05_;
  (* src = "serv/rtl/serv_ctrl.v:96" *)
  wire _06_;
  (* src = "serv/rtl/serv_ctrl.v:42" *)
  wire _07_;
  (* src = "serv/rtl/serv_ctrl.v:74" *)
  wire _08_;
  (* src = "serv/rtl/serv_ctrl.v:82" *)
  wire _09_;
  (* src = "serv/rtl/serv_ctrl.v:88" *)
  wire _10_;
  (* src = "serv/rtl/serv_ctrl.v:82" *)
  wire _11_;
  wire _12_;
  wire _13_;
  (* src = "serv/rtl/serv_ctrl.v:71" *)
  wire _14_;
  (* src = "serv/rtl/serv_ctrl.v:74" *)
  wire _15_;
  (* src = "serv/rtl/serv_ctrl.v:4" *)
  input clk;
  (* src = "serv/rtl/serv_ctrl.v:29" *)
  reg en_pc_r;
  (* src = "serv/rtl/serv_ctrl.v:8" *)
  input [4:0] i_cnt;
  (* src = "serv/rtl/serv_ctrl.v:10" *)
  input i_cnt_done;
  (* src = "serv/rtl/serv_ctrl.v:9" *)
  input [3:0] i_cnt_r;
  (* src = "serv/rtl/serv_ctrl.v:19" *)
  input i_csr_pc;
  (* src = "serv/rtl/serv_ctrl.v:6" *)
  input i_en;
  (* src = "serv/rtl/serv_ctrl.v:25" *)
  input i_ibus_ack;
  (* src = "serv/rtl/serv_ctrl.v:15" *)
  input i_jal_or_jalr;
  (* src = "serv/rtl/serv_ctrl.v:14" *)
  input i_jalr;
  (* src = "serv/rtl/serv_ctrl.v:11" *)
  input i_jump;
  (* src = "serv/rtl/serv_ctrl.v:17" *)
  input i_lui;
  (* src = "serv/rtl/serv_ctrl.v:12" *)
  input i_offset;
  (* src = "serv/rtl/serv_ctrl.v:7" *)
  input i_pc_en;
  (* src = "serv/rtl/serv_ctrl.v:13" *)
  input i_rs1;
  (* src = "serv/rtl/serv_ctrl.v:5" *)
  input i_rst;
  (* src = "serv/rtl/serv_ctrl.v:18" *)
  input i_trap;
  (* src = "serv/rtl/serv_ctrl.v:16" *)
  input i_utype;
  (* src = "serv/rtl/serv_ctrl.v:38" *)
  wire new_pc;
  (* src = "serv/rtl/serv_ctrl.v:21" *)
  output o_bad_pc;
  (* src = "serv/rtl/serv_ctrl.v:23" *)
  output [31:0] o_ibus_adr;
  (* src = "serv/rtl/serv_ctrl.v:24" *)
  output o_ibus_cyc;
  (* init = 1'h0 *)
  (* src = "serv/rtl/serv_ctrl.v:22" *)
  output o_misalign;
  reg o_misalign = 1'h0;
  (* src = "serv/rtl/serv_ctrl.v:20" *)
  output o_rd;
  (* src = "serv/rtl/serv_ctrl.v:40" *)
  wire offset_a;
  (* src = "serv/rtl/serv_ctrl.v:36" *)
  wire pc;
  (* src = "serv/rtl/serv_ctrl.v:31" *)
  wire pc_plus_4;
  (* src = "serv/rtl/serv_ctrl.v:32" *)
  wire pc_plus_offset;
  (* src = "serv/rtl/serv_ctrl.v:86" *)
  wire pc_plus_offset_aligned;
  (* src = "serv/rtl/serv_ctrl.v:34" *)
  wire plus_4;
  assign plus_4 = i_cnt_r[2] & (* src = "serv/rtl/serv_ctrl.v:42" *) _07_;
  assign _02_ = i_csr_pc & (* src = "serv/rtl/serv_ctrl.v:71" *) en_pc_r;
  assign _03_ = i_utype & (* src = "serv/rtl/serv_ctrl.v:72" *) pc_plus_offset_aligned;
  assign _04_ = pc_plus_4 & (* src = "serv/rtl/serv_ctrl.v:72" *) i_jal_or_jalr;
  assign offset_a = _08_ & (* src = "serv/rtl/serv_ctrl.v:74" *) _15_;
  assign pc_plus_offset_aligned = pc_plus_offset & (* src = "serv/rtl/serv_ctrl.v:86" *) en_pc_r;
  assign o_ibus_cyc = en_pc_r & (* src = "serv/rtl/serv_ctrl.v:88" *) _10_;
  assign _05_ = o_ibus_cyc & (* src = "serv/rtl/serv_ctrl.v:93" *) i_ibus_ack;
  assign _06_ = _07_ & (* src = "serv/rtl/serv_ctrl.v:96" *) i_cnt_r[1];
  assign _07_ = ! (* src = "serv/rtl/serv_ctrl.v:42" *) i_cnt[4:2];
  assign _08_ = ! (* src = "serv/rtl/serv_ctrl.v:74" *) i_lui;
  assign _09_ = ! (* src = "serv/rtl/serv_ctrl.v:82" *) i_en;
  assign _10_ = ! (* src = "serv/rtl/serv_ctrl.v:88" *) i_pc_en;
  assign o_rd = _03_ | (* src = "serv/rtl/serv_ctrl.v:72" *) _04_;
  assign _11_ = _09_ | (* src = "serv/rtl/serv_ctrl.v:82" *) i_cnt_done;
  always @(posedge clk)
      o_misalign <= _01_;
  always @(posedge clk)
      en_pc_r <= _00_;
  assign _12_ = _05_ ? (* src = "serv/rtl/serv_ctrl.v:93" *) 1'h0 : en_pc_r;
  assign _13_ = i_pc_en ? (* full_case = 32'd1 *) (* src = "serv/rtl/serv_ctrl.v:91" *) 1'h1 : _12_;
  assign _00_ = i_rst ? (* src = "serv/rtl/serv_ctrl.v:98" *) 1'h1 : _13_;
  assign _01_ = _06_ ? (* src = "serv/rtl/serv_ctrl.v:96" *) pc_plus_offset : o_misalign;
  assign _14_ = i_jump ? (* src = "serv/rtl/serv_ctrl.v:71" *) pc_plus_offset_aligned : pc_plus_4;
  assign new_pc = i_trap ? (* src = "serv/rtl/serv_ctrl.v:71" *) _02_ : _14_;
  assign _15_ = i_jalr ? (* src = "serv/rtl/serv_ctrl.v:74" *) i_rs1 : pc;
  (* module_not_derived = 32'd1 *)
  (* src = "serv/rtl/serv_ctrl.v:57" *)
  \$paramod\shift_reg\LEN=32\INIT=8  pc_reg (
    .clk(clk),
    .i_d(new_pc),
    .i_en(i_pc_en),
    .i_rst(i_rst),
    .o_par(o_ibus_adr[31:1]),
    .o_q(pc)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "serv/rtl/serv_ctrl.v:47" *)
  ser_add ser_add_pc_plus_4 (
    .a(pc),
    .b(plus_4),
    .clk(clk),
    .clr(i_cnt_done),
    .o_v(),
    .q(pc_plus_4),
    .rst(i_rst)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "serv/rtl/serv_ctrl.v:76" *)
  ser_add ser_add_pc_plus_offset (
    .a(offset_a),
    .b(i_offset),
    .clk(clk),
    .clr(_11_),
    .o_v(),
    .q(pc_plus_offset),
    .rst(i_rst)
  );
  assign o_bad_pc = pc_plus_offset_aligned;
  assign o_ibus_adr[0] = pc;
endmodule

(* dynports =  1  *)
(* src = "serv/rtl/shift_reg.v:1" *)
module \$paramod\shift_reg\LEN=32\INIT=8 (clk, i_rst, i_en, i_d, o_q, o_par);
  (* src = "serv/rtl/shift_reg.v:15" *)
  wire [31:0] _0_;
  wire [31:0] _1_;
  (* src = "serv/rtl/shift_reg.v:5" *)
  input clk;
  (* init = 32'd8 *)
  (* src = "serv/rtl/shift_reg.v:12" *)
  reg [31:0] data = 32'd8;
  (* src = "serv/rtl/shift_reg.v:8" *)
  input i_d;
  (* src = "serv/rtl/shift_reg.v:7" *)
  input i_en;
  (* src = "serv/rtl/shift_reg.v:6" *)
  input i_rst;
  (* src = "serv/rtl/shift_reg.v:10" *)
  output [30:0] o_par;
  (* src = "serv/rtl/shift_reg.v:9" *)
  output o_q;
  always @(posedge clk)
      data <= _0_;
  assign _1_ = i_en ? (* src = "serv/rtl/shift_reg.v:18" *) { i_d, data[31:1] } : data;
  assign _0_ = i_rst ? (* full_case = 32'd1 *) (* src = "serv/rtl/shift_reg.v:16" *) 32'd8 : _1_;
  assign o_par = data[31:1];
  assign o_q = data[0];
endmodule

(* dynports =  1  *)
(* src = "serv/rtl/shift_reg.v:1" *)
module \$paramod\shift_reg\LEN=5 (clk, i_rst, i_en, i_d, o_q, o_par);
  (* src = "serv/rtl/shift_reg.v:15" *)
  wire [4:0] _0_;
  wire [4:0] _1_;
  (* src = "serv/rtl/shift_reg.v:5" *)
  input clk;
  (* init = 5'h00 *)
  (* src = "serv/rtl/shift_reg.v:12" *)
  reg [4:0] data = 5'h00;
  (* src = "serv/rtl/shift_reg.v:8" *)
  input i_d;
  (* src = "serv/rtl/shift_reg.v:7" *)
  input i_en;
  (* src = "serv/rtl/shift_reg.v:6" *)
  input i_rst;
  (* src = "serv/rtl/shift_reg.v:10" *)
  output [3:0] o_par;
  (* src = "serv/rtl/shift_reg.v:9" *)
  output o_q;
  always @(posedge clk)
      data <= _0_;
  assign _1_ = i_en ? (* src = "serv/rtl/shift_reg.v:18" *) { i_d, data[4:1] } : data;
  assign _0_ = i_rst ? (* full_case = 32'd1 *) (* src = "serv/rtl/shift_reg.v:16" *) 5'h00 : _1_;
  assign o_par = data[4:1];
  assign o_q = data[0];
endmodule

(* src = "serv/rtl/ser_add.v:2" *)
module ser_add(clk, rst, a, b, clr, q, o_v);
  (* src = "serv/rtl/ser_add.v:19" *)
  wire _00_;
  (* src = "serv/rtl/ser_add.v:16" *)
  wire _01_;
  (* src = "serv/rtl/ser_add.v:16" *)
  wire _02_;
  (* src = "serv/rtl/ser_add.v:23" *)
  wire _03_;
  (* src = "serv/rtl/ser_add.v:23" *)
  wire _04_;
  (* src = "serv/rtl/ser_add.v:6" *)
  input a;
  (* src = "serv/rtl/ser_add.v:14" *)
  wire axorb;
  (* src = "serv/rtl/ser_add.v:7" *)
  input b;
  (* src = "serv/rtl/ser_add.v:12" *)
  reg c_r;
  (* src = "serv/rtl/ser_add.v:4" *)
  input clk;
  (* src = "serv/rtl/ser_add.v:8" *)
  input clr;
  (* src = "serv/rtl/ser_add.v:10" *)
  output o_v;
  (* src = "serv/rtl/ser_add.v:9" *)
  output q;
  (* src = "serv/rtl/ser_add.v:5" *)
  input rst;
  assign _01_ = axorb & (* src = "serv/rtl/ser_add.v:16" *) c_r;
  assign _02_ = a & (* src = "serv/rtl/ser_add.v:16" *) b;
  assign _03_ = _04_ & (* src = "serv/rtl/ser_add.v:23" *) o_v;
  assign _04_ = ! (* src = "serv/rtl/ser_add.v:23" *) clr;
  assign o_v = _01_ | (* src = "serv/rtl/ser_add.v:16" *) _02_;
  always @(posedge clk)
      c_r <= _00_;
  assign _00_ = rst ? (* full_case = 32'd1 *) (* src = "serv/rtl/ser_add.v:20" *) 1'h0 : _03_;
  assign axorb = a ^ (* src = "serv/rtl/ser_add.v:14" *) b;
  assign q = axorb ^ (* src = "serv/rtl/ser_add.v:18" *) c_r;
endmodule

(* src = "serv/rtl/ser_lt.v:2" *)
module ser_lt(i_clk, i_a, i_b, i_clr, i_sign, o_q);
  (* src = "serv/rtl/ser_lt.v:16" *)
  wire _00_;
  (* src = "serv/rtl/ser_lt.v:13" *)
  wire _01_;
  (* src = "serv/rtl/ser_lt.v:13" *)
  wire _02_;
  (* src = "serv/rtl/ser_lt.v:13" *)
  wire _03_;
  (* src = "serv/rtl/ser_lt.v:13" *)
  wire _04_;
  (* src = "serv/rtl/ser_lt.v:13" *)
  wire _05_;
  (* src = "serv/rtl/ser_lt.v:13" *)
  wire _06_;
  (* src = "serv/rtl/ser_lt.v:17" *)
  wire _07_;
  (* src = "serv/rtl/ser_lt.v:13" *)
  wire _08_;
  (* src = "serv/rtl/ser_lt.v:5" *)
  input i_a;
  (* src = "serv/rtl/ser_lt.v:6" *)
  input i_b;
  (* src = "serv/rtl/ser_lt.v:4" *)
  input i_clk;
  (* src = "serv/rtl/ser_lt.v:7" *)
  input i_clr;
  (* src = "serv/rtl/ser_lt.v:8" *)
  input i_sign;
  (* src = "serv/rtl/ser_lt.v:13" *)
  wire lt;
  (* src = "serv/rtl/ser_lt.v:11" *)
  reg lt_r;
  (* src = "serv/rtl/ser_lt.v:9" *)
  output o_q;
  assign _01_ = i_a & (* src = "serv/rtl/ser_lt.v:13" *) _05_;
  assign _02_ = _06_ & (* src = "serv/rtl/ser_lt.v:13" *) i_b;
  assign _03_ = _04_ & (* src = "serv/rtl/ser_lt.v:13" *) lt_r;
  assign _00_ = lt & (* src = "serv/rtl/ser_lt.v:17" *) _07_;
  assign _04_ = i_a == (* src = "serv/rtl/ser_lt.v:13" *) i_b;
  assign _05_ = ~ (* src = "serv/rtl/ser_lt.v:13" *) i_b;
  assign _06_ = ~ (* src = "serv/rtl/ser_lt.v:13" *) i_a;
  assign _07_ = ~ (* src = "serv/rtl/ser_lt.v:17" *) i_clr;
  assign lt = _08_ | (* src = "serv/rtl/ser_lt.v:13" *) _03_;
  always @(posedge i_clk)
      lt_r <= _00_;
  assign _08_ = i_sign ? (* src = "serv/rtl/ser_lt.v:13" *) _01_ : _02_;
  assign o_q = lt;
endmodule

(* src = "serv/rtl/ser_shift.v:2" *)
module ser_shift(i_clk, i_rst, i_load, i_shamt, i_shamt_msb, i_signbit, i_right, o_done, i_d, o_q);
  (* src = "serv/rtl/ser_shift.v:19" *)
  wire [5:0] _00_;
  (* src = "serv/rtl/ser_shift.v:19" *)
  wire _01_;
  (* src = "serv/rtl/ser_shift.v:19" *)
  wire _02_;
  (* src = "serv/rtl/ser_shift.v:20" *)
  wire [5:0] _03_;
  (* src = "serv/rtl/ser_shift.v:23" *)
  wire _04_;
  (* src = "serv/rtl/ser_shift.v:25" *)
  wire _05_;
  (* src = "serv/rtl/ser_shift.v:25" *)
  wire _06_;
  (* src = "serv/rtl/ser_shift.v:29" *)
  wire _07_;
  (* src = "serv/rtl/ser_shift.v:16" *)
  reg [5:0] cnt;
  (* src = "serv/rtl/ser_shift.v:4" *)
  input i_clk;
  (* src = "serv/rtl/ser_shift.v:12" *)
  input i_d;
  (* src = "serv/rtl/ser_shift.v:6" *)
  input i_load;
  (* src = "serv/rtl/ser_shift.v:10" *)
  input i_right;
  (* src = "serv/rtl/ser_shift.v:5" *)
  input i_rst;
  (* src = "serv/rtl/ser_shift.v:7" *)
  input [4:0] i_shamt;
  (* src = "serv/rtl/ser_shift.v:8" *)
  input i_shamt_msb;
  (* src = "serv/rtl/ser_shift.v:9" *)
  input i_signbit;
  (* src = "serv/rtl/ser_shift.v:11" *)
  output o_done;
  (* src = "serv/rtl/ser_shift.v:13" *)
  output o_q;
  (* src = "serv/rtl/ser_shift.v:15" *)
  reg signbit;
  (* src = "serv/rtl/ser_shift.v:17" *)
  reg wrapped;
  assign _03_ = cnt + (* src = "serv/rtl/ser_shift.v:20" *) 1'h1;
  assign _04_ = i_signbit & (* src = "serv/rtl/ser_shift.v:23" *) i_right;
  assign _05_ = i_shamt_msb & (* src = "serv/rtl/ser_shift.v:25" *) _06_;
  assign o_done = cnt[4:0] == (* src = "serv/rtl/ser_shift.v:28" *) i_shamt;
  assign _06_ = ! (* src = "serv/rtl/ser_shift.v:25" *) i_right;
  assign _02_ = cnt[5] | (* src = "serv/rtl/ser_shift.v:25" *) _05_;
  always @(posedge i_clk)
      cnt <= _00_;
  always @(posedge i_clk)
      signbit <= _01_;
  always @(posedge i_clk)
      wrapped <= _02_;
  assign _00_ = i_load ? (* src = "serv/rtl/ser_shift.v:21" *) 6'h00 : _03_;
  assign _01_ = i_load ? (* src = "serv/rtl/ser_shift.v:21" *) _04_ : signbit;
  assign o_q = _07_ ? (* src = "serv/rtl/ser_shift.v:29" *) i_d : signbit;
  assign _07_ = i_right ^ (* src = "serv/rtl/ser_shift.v:29" *) wrapped;
endmodule

(* src = "serv/rtl/serv_alu.v:2" *)
module serv_alu(clk, i_rst, i_en, i_rs1, i_op_b, i_buf, i_init, i_cnt_done, i_sub, i_bool_op, i_cmp_sel, i_cmp_neg, i_cmp_uns, o_cmp, i_shamt_en, i_sh_right, i_sh_signed, o_sh_done, i_rd_sel, o_rd);
  (* src = "serv/rtl/serv_alu.v:116" *)
  wire _00_;
  (* src = "serv/rtl/serv_alu.v:116" *)
  wire _01_;
  (* src = "serv/rtl/serv_alu.v:67" *)
  wire _02_;
  (* src = "serv/rtl/serv_alu.v:59" *)
  wire _03_;
  (* src = "serv/rtl/serv_alu.v:99" *)
  wire _04_;
  (* src = "serv/rtl/serv_alu.v:108" *)
  wire _05_;
  (* src = "serv/rtl/serv_alu.v:109" *)
  wire _06_;
  (* src = "serv/rtl/serv_alu.v:110" *)
  wire _07_;
  (* src = "serv/rtl/serv_alu.v:111" *)
  wire _08_;
  (* src = "serv/rtl/serv_alu.v:128" *)
  wire _09_;
  (* src = "serv/rtl/serv_alu.v:102" *)
  wire _10_;
  (* src = "serv/rtl/serv_alu.v:77" *)
  wire _11_;
  (* src = "serv/rtl/serv_alu.v:98" *)
  wire _12_;
  (* src = "serv/rtl/serv_alu.v:99" *)
  wire _13_;
  (* src = "serv/rtl/serv_alu.v:75" *)
  wire _14_;
  (* src = "serv/rtl/serv_alu.v:103" *)
  wire _15_;
  (* src = "serv/rtl/serv_alu.v:111" *)
  wire _16_;
  (* src = "serv/rtl/serv_alu.v:111" *)
  wire _17_;
  (* src = "serv/rtl/serv_alu.v:111" *)
  wire _18_;
  (* src = "serv/rtl/serv_alu.v:81" *)
  wire add_b;
  (* src = "serv/rtl/serv_alu.v:40" *)
  wire b_inv_plus_1;
  (* src = "serv/rtl/serv_alu.v:65" *)
  wire b_inv_plus_1_cy;
  (* src = "serv/rtl/serv_alu.v:4" *)
  input clk;
  (* src = "serv/rtl/serv_alu.v:37" *)
  reg en_r;
  (* src = "serv/rtl/serv_alu.v:114" *)
  reg eq_r;
  (* src = "serv/rtl/serv_alu.v:13" *)
  input [1:0] i_bool_op;
  (* src = "serv/rtl/serv_alu.v:9" *)
  input i_buf;
  (* src = "serv/rtl/serv_alu.v:15" *)
  input i_cmp_neg;
  (* src = "serv/rtl/serv_alu.v:14" *)
  input i_cmp_sel;
  (* src = "serv/rtl/serv_alu.v:16" *)
  input i_cmp_uns;
  (* src = "serv/rtl/serv_alu.v:11" *)
  input i_cnt_done;
  (* src = "serv/rtl/serv_alu.v:6" *)
  input i_en;
  (* src = "serv/rtl/serv_alu.v:10" *)
  input i_init;
  (* src = "serv/rtl/serv_alu.v:8" *)
  input i_op_b;
  (* src = "serv/rtl/serv_alu.v:22" *)
  input [1:0] i_rd_sel;
  (* src = "serv/rtl/serv_alu.v:7" *)
  input i_rs1;
  (* src = "serv/rtl/serv_alu.v:5" *)
  input i_rst;
  (* src = "serv/rtl/serv_alu.v:19" *)
  input i_sh_right;
  (* src = "serv/rtl/serv_alu.v:20" *)
  input i_sh_signed;
  (* src = "serv/rtl/serv_alu.v:18" *)
  input i_shamt_en;
  (* src = "serv/rtl/serv_alu.v:12" *)
  input i_sub;
  (* src = "serv/rtl/serv_alu.v:17" *)
  output o_cmp;
  (* src = "serv/rtl/serv_alu.v:23" *)
  output o_rd;
  (* src = "serv/rtl/serv_alu.v:21" *)
  output o_sh_done;
  (* src = "serv/rtl/serv_alu.v:39" *)
  wire plus_1;
  (* src = "serv/rtl/serv_alu.v:27" *)
  wire result_add;
  (* src = "serv/rtl/serv_alu.v:106" *)
  wire result_bool;
  (* src = "serv/rtl/serv_alu.v:28" *)
  wire result_eq;
  (* src = "serv/rtl/serv_alu.v:29" *)
  wire result_lt;
  (* src = "serv/rtl/serv_alu.v:32" *)
  reg result_lt_r;
  (* src = "serv/rtl/serv_alu.v:30" *)
  wire result_sh;
  (* src = "serv/rtl/serv_alu.v:34" *)
  wire [4:0] shamt;
  (* src = "serv/rtl/serv_alu.v:35" *)
  reg shamt_msb;
  (* src = "serv/rtl/serv_alu.v:38" *)
  wire shamt_ser;
  assign plus_1 = i_en & (* src = "serv/rtl/serv_alu.v:102" *) _10_;
  assign result_eq = eq_r & (* src = "serv/rtl/serv_alu.v:128" *) _09_;
  assign _03_ = i_sh_signed & (* src = "serv/rtl/serv_alu.v:59" *) i_rs1;
  assign _04_ = i_cnt_done & (* src = "serv/rtl/serv_alu.v:99" *) _13_;
  assign _05_ = ! (* src = "serv/rtl/serv_alu.v:108" *) i_rd_sel;
  assign _06_ = i_rd_sel == (* src = "serv/rtl/serv_alu.v:109" *) 1'h1;
  assign _07_ = i_rd_sel == (* src = "serv/rtl/serv_alu.v:110" *) 2'h2;
  assign _08_ = i_rd_sel == (* src = "serv/rtl/serv_alu.v:111" *) 2'h3;
  assign _09_ = i_rs1 == (* src = "serv/rtl/serv_alu.v:128" *) i_op_b;
  assign _10_ = ! (* src = "serv/rtl/serv_alu.v:102" *) en_r;
  assign _11_ = ! (* src = "serv/rtl/serv_alu.v:77" *) i_en;
  assign _12_ = ! (* src = "serv/rtl/serv_alu.v:98" *) i_init;
  assign _13_ = ! (* src = "serv/rtl/serv_alu.v:99" *) i_cmp_uns;
  assign _14_ = ~ (* src = "serv/rtl/serv_alu.v:75" *) i_op_b;
  always @(posedge clk)
      result_lt_r <= _01_;
  always @(posedge clk)
      en_r <= i_en;
  always @(posedge clk)
      eq_r <= _00_;
  always @(posedge clk)
      shamt_msb <= _02_;
  assign _00_ = i_init ? (* full_case = 32'd1 *) (* src = "serv/rtl/serv_alu.v:117" *) result_eq : 1'h1;
  assign _01_ = i_init ? (* full_case = 32'd1 *) (* src = "serv/rtl/serv_alu.v:117" *) result_lt : 1'h0;
  assign _02_ = i_shamt_en ? (* src = "serv/rtl/serv_alu.v:68" *) b_inv_plus_1_cy : shamt_msb;
  wire [15:0] _49_ = 16'h8e96;
  assign result_bool = _49_[{ i_bool_op, i_rs1, i_op_b } +: 1];
  assign _15_ = i_cmp_sel ? (* src = "serv/rtl/serv_alu.v:103" *) result_eq : result_lt;
  assign _16_ = _08_ ? (* src = "serv/rtl/serv_alu.v:111" *) result_bool : 1'hx;
  assign _17_ = _07_ ? (* src = "serv/rtl/serv_alu.v:111" *) result_lt_r : _16_;
  assign _18_ = _06_ ? (* src = "serv/rtl/serv_alu.v:111" *) result_sh : _17_;
  assign o_rd = _05_ ? (* src = "serv/rtl/serv_alu.v:111" *) result_add : _18_;
  assign shamt_ser = i_sh_right ? (* src = "serv/rtl/serv_alu.v:42" *) i_op_b : b_inv_plus_1;
  assign add_b = i_sub ? (* src = "serv/rtl/serv_alu.v:81" *) b_inv_plus_1 : i_op_b;
  assign o_cmp = i_cmp_neg ^ (* src = "serv/rtl/serv_alu.v:103" *) _15_;
  (* module_not_derived = 32'd1 *)
  (* src = "serv/rtl/serv_alu.v:83" *)
  ser_add ser_add (
    .a(i_rs1),
    .b(add_b),
    .clk(clk),
    .clr(_11_),
    .o_v(),
    .q(result_add),
    .rst(i_rst)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "serv/rtl/serv_alu.v:71" *)
  ser_add ser_add_inv_plus_1 (
    .a(_14_),
    .b(plus_1),
    .clk(clk),
    .clr(_11_),
    .o_v(b_inv_plus_1_cy),
    .q(b_inv_plus_1),
    .rst(i_rst)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "serv/rtl/serv_alu.v:93" *)
  ser_lt ser_lt (
    .i_a(i_rs1),
    .i_b(i_op_b),
    .i_clk(clk),
    .i_clr(_12_),
    .i_sign(_04_),
    .o_q(result_lt)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "serv/rtl/serv_alu.v:44" *)
  \$paramod\shift_reg\LEN=5  shamt_reg (
    .clk(clk),
    .i_d(shamt_ser),
    .i_en(i_shamt_en),
    .i_rst(i_rst),
    .o_par(shamt[4:1]),
    .o_q(shamt[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "serv/rtl/serv_alu.v:52" *)
  ser_shift shift (
    .i_clk(clk),
    .i_d(i_buf),
    .i_load(i_init),
    .i_right(i_sh_right),
    .i_rst(i_rst),
    .i_shamt(shamt),
    .i_shamt_msb(shamt_msb),
    .i_signbit(_03_),
    .o_done(o_sh_done),
    .o_q(result_sh)
  );
endmodule

(* src = "serv/rtl/serv_bufreg.v:1" *)
module serv_bufreg(i_clk, i_rst, i_cnt, i_cnt_r, i_en, i_clr, i_loop, i_rs1, i_rs1_en, i_imm, i_imm_en, o_lsb, o_reg, o_q);
  (* src = "serv/rtl/serv_bufreg.v:24" *)
  wire _00_;
  (* src = "serv/rtl/serv_bufreg.v:24" *)
  wire [31:0] _01_;
  (* src = "serv/rtl/serv_bufreg.v:24" *)
  wire [1:0] _02_;
  (* src = "serv/rtl/serv_bufreg.v:22" *)
  wire [1:0] _03_;
  (* src = "serv/rtl/serv_bufreg.v:22" *)
  wire _04_;
  (* src = "serv/rtl/serv_bufreg.v:22" *)
  wire _05_;
  (* src = "serv/rtl/serv_bufreg.v:32" *)
  wire _06_;
  (* src = "serv/rtl/serv_bufreg.v:32" *)
  wire _07_;
  (* src = "serv/rtl/serv_bufreg.v:34" *)
  wire _08_;
  (* src = "serv/rtl/serv_bufreg.v:34" *)
  wire _09_;
  (* src = "serv/rtl/serv_bufreg.v:32" *)
  wire _10_;
  (* src = "serv/rtl/serv_bufreg.v:25" *)
  wire _11_;
  wire [31:0] _12_;
  (* src = "serv/rtl/serv_bufreg.v:30" *)
  wire _13_;
  (* src = "serv/rtl/serv_bufreg.v:18" *)
  wire c;
  (* src = "serv/rtl/serv_bufreg.v:19" *)
  reg c_r;
  (* src = "serv/rtl/serv_bufreg.v:20" *)
  reg [31:0] data;
  (* src = "serv/rtl/serv_bufreg.v:3" *)
  input i_clk;
  (* src = "serv/rtl/serv_bufreg.v:8" *)
  input i_clr;
  (* src = "serv/rtl/serv_bufreg.v:5" *)
  input [4:0] i_cnt;
  (* src = "serv/rtl/serv_bufreg.v:6" *)
  input [3:0] i_cnt_r;
  (* src = "serv/rtl/serv_bufreg.v:7" *)
  input i_en;
  (* src = "serv/rtl/serv_bufreg.v:12" *)
  input i_imm;
  (* src = "serv/rtl/serv_bufreg.v:13" *)
  input i_imm_en;
  (* src = "serv/rtl/serv_bufreg.v:9" *)
  input i_loop;
  (* src = "serv/rtl/serv_bufreg.v:10" *)
  input i_rs1;
  (* src = "serv/rtl/serv_bufreg.v:11" *)
  input i_rs1_en;
  (* src = "serv/rtl/serv_bufreg.v:4" *)
  input i_rst;
  (* src = "serv/rtl/serv_bufreg.v:14" *)
  output [1:0] o_lsb;
  reg [1:0] o_lsb;
  (* src = "serv/rtl/serv_bufreg.v:16" *)
  output o_q;
  (* src = "serv/rtl/serv_bufreg.v:15" *)
  output [31:0] o_reg;
  (* src = "serv/rtl/serv_bufreg.v:18" *)
  wire q;
  assign _03_ = _04_ + (* src = "serv/rtl/serv_bufreg.v:22" *) _05_;
  assign { c, q } = _03_ + (* src = "serv/rtl/serv_bufreg.v:22" *) c_r;
  assign _04_ = i_rs1 & (* src = "serv/rtl/serv_bufreg.v:22" *) i_rs1_en;
  assign _05_ = i_imm & (* src = "serv/rtl/serv_bufreg.v:22" *) i_imm_en;
  assign _00_ = c & (* src = "serv/rtl/serv_bufreg.v:25" *) _11_;
  assign _06_ = _10_ & (* src = "serv/rtl/serv_bufreg.v:32" *) i_cnt_r[0];
  assign _07_ = _06_ & (* src = "serv/rtl/serv_bufreg.v:32" *) i_en;
  assign _08_ = _10_ & (* src = "serv/rtl/serv_bufreg.v:34" *) i_cnt_r[1];
  assign _09_ = _08_ & (* src = "serv/rtl/serv_bufreg.v:34" *) i_en;
  assign _10_ = ! (* src = "serv/rtl/serv_bufreg.v:32" *) i_cnt[4:2];
  assign _11_ = ! (* src = "serv/rtl/serv_bufreg.v:25" *) i_clr;
  always @(posedge i_clk)
      o_lsb <= _02_;
  always @(posedge i_clk)
      c_r <= _00_;
  always @(posedge i_clk)
      data <= _01_;
  assign _02_[1] = _09_ ? (* src = "serv/rtl/serv_bufreg.v:34" *) q : o_lsb[1];
  assign _02_[0] = _07_ ? (* src = "serv/rtl/serv_bufreg.v:32" *) q : o_lsb[0];
  assign _12_ = i_en ? (* src = "serv/rtl/serv_bufreg.v:29" *) { _13_, data[31:1] } : data;
  assign _01_ = i_rst ? (* full_case = 32'd1 *) (* src = "serv/rtl/serv_bufreg.v:27" *) 32'd0 : _12_;
  assign _13_ = i_loop ? (* src = "serv/rtl/serv_bufreg.v:30" *) data[0] : q;
  assign o_q = data[0];
  assign o_reg = data;
endmodule

(* src = "serv/rtl/serv_csr.v:2" *)
module serv_csr(i_clk, i_cnt, i_cnt_r, i_mtip, o_timer_irq_en, i_mstatus_en, i_mie_en, i_mtvec_en, i_mip_en, i_mscratch_en, i_mepc_en, i_mcause_en, i_mtval_en, i_csr_source, i_trap, i_pc, i_mtval, i_mcause, i_d, o_q);
  (* src = "serv/rtl/serv_csr.v:75" *)
  wire _000_;
  (* src = "serv/rtl/serv_csr.v:75" *)
  wire [3:0] _001_;
  (* src = "serv/rtl/serv_csr.v:75" *)
  wire [31:0] _002_;
  (* src = "serv/rtl/serv_csr.v:75" *)
  wire _003_;
  (* src = "serv/rtl/serv_csr.v:75" *)
  wire [31:0] _004_;
  (* src = "serv/rtl/serv_csr.v:75" *)
  wire _005_;
  (* src = "serv/rtl/serv_csr.v:75" *)
  wire _006_;
  (* src = "serv/rtl/serv_csr.v:75" *)
  wire [31:0] _007_;
  (* src = "serv/rtl/serv_csr.v:75" *)
  wire [31:0] _008_;
  (* src = "serv/rtl/serv_csr.v:100" *)
  wire _009_;
  (* src = "serv/rtl/serv_csr.v:56" *)
  wire _010_;
  (* src = "serv/rtl/serv_csr.v:60" *)
  wire _011_;
  (* src = "serv/rtl/serv_csr.v:61" *)
  wire _012_;
  (* src = "serv/rtl/serv_csr.v:62" *)
  wire _013_;
  (* src = "serv/rtl/serv_csr.v:63" *)
  wire _014_;
  (* src = "serv/rtl/serv_csr.v:64" *)
  wire _015_;
  (* src = "serv/rtl/serv_csr.v:65" *)
  wire _016_;
  (* src = "serv/rtl/serv_csr.v:76" *)
  wire _017_;
  (* src = "serv/rtl/serv_csr.v:76" *)
  wire _018_;
  (* src = "serv/rtl/serv_csr.v:79" *)
  wire _019_;
  (* src = "serv/rtl/serv_csr.v:79" *)
  wire _020_;
  (* src = "serv/rtl/serv_csr.v:82" *)
  wire _021_;
  (* src = "serv/rtl/serv_csr.v:85" *)
  wire _022_;
  (* src = "serv/rtl/serv_csr.v:100" *)
  wire _023_;
  (* src = "serv/rtl/serv_csr.v:54" *)
  wire _024_;
  (* src = "serv/rtl/serv_csr.v:55" *)
  wire _025_;
  (* src = "serv/rtl/serv_csr.v:56" *)
  wire _026_;
  (* src = "serv/rtl/serv_csr.v:57" *)
  wire _027_;
  (* src = "serv/rtl/serv_csr.v:71" *)
  wire _028_;
  (* src = "serv/rtl/serv_csr.v:79" *)
  wire _029_;
  (* src = "serv/rtl/serv_csr.v:56" *)
  wire _030_;
  (* src = "serv/rtl/serv_csr.v:104" *)
  wire _031_;
  (* src = "serv/rtl/serv_csr.v:55" *)
  wire _032_;
  (* src = "serv/rtl/serv_csr.v:61" *)
  wire _033_;
  (* src = "serv/rtl/serv_csr.v:62" *)
  wire _034_;
  (* src = "serv/rtl/serv_csr.v:63" *)
  wire _035_;
  (* src = "serv/rtl/serv_csr.v:64" *)
  wire _036_;
  (* src = "serv/rtl/serv_csr.v:94" *)
  wire _037_;
  wire [3:0] _038_;
  wire [3:0] _039_;
  wire _040_;
  wire _041_;
  (* src = "serv/rtl/serv_csr.v:105" *)
  wire _042_;
  (* src = "serv/rtl/serv_csr.v:58" *)
  wire _043_;
  (* src = "serv/rtl/serv_csr.v:58" *)
  wire _044_;
  (* src = "serv/rtl/serv_csr.v:58" *)
  wire _045_;
  (* src = "serv/rtl/serv_csr.v:73" *)
  wire _046_;
  (* src = "serv/rtl/serv_csr.v:86" *)
  wire [3:0] _047_;
  (* src = "serv/rtl/serv_csr.v:95" *)
  wire _048_;
  (* src = "serv/rtl/serv_csr.v:51" *)
  wire csr_in;
  (* src = "serv/rtl/serv_csr.v:52" *)
  wire csr_out;
  (* src = "serv/rtl/serv_csr.v:4" *)
  input i_clk;
  (* src = "serv/rtl/serv_csr.v:5" *)
  input [4:0] i_cnt;
  (* src = "serv/rtl/serv_csr.v:6" *)
  input [3:0] i_cnt_r;
  (* src = "serv/rtl/serv_csr.v:17" *)
  input [1:0] i_csr_source;
  (* src = "serv/rtl/serv_csr.v:22" *)
  input i_d;
  (* src = "serv/rtl/serv_csr.v:21" *)
  input [3:0] i_mcause;
  (* src = "serv/rtl/serv_csr.v:15" *)
  input i_mcause_en;
  (* src = "serv/rtl/serv_csr.v:14" *)
  input i_mepc_en;
  (* src = "serv/rtl/serv_csr.v:10" *)
  input i_mie_en;
  (* src = "serv/rtl/serv_csr.v:12" *)
  input i_mip_en;
  (* src = "serv/rtl/serv_csr.v:13" *)
  input i_mscratch_en;
  (* src = "serv/rtl/serv_csr.v:9" *)
  input i_mstatus_en;
  (* src = "serv/rtl/serv_csr.v:7" *)
  input i_mtip;
  (* src = "serv/rtl/serv_csr.v:20" *)
  input i_mtval;
  (* src = "serv/rtl/serv_csr.v:16" *)
  input i_mtval_en;
  (* src = "serv/rtl/serv_csr.v:11" *)
  input i_mtvec_en;
  (* src = "serv/rtl/serv_csr.v:19" *)
  input i_pc;
  (* src = "serv/rtl/serv_csr.v:18" *)
  input i_trap;
  (* src = "serv/rtl/serv_csr.v:47" *)
  wire mcause;
  (* src = "serv/rtl/serv_csr.v:45" *)
  reg mcause31;
  (* src = "serv/rtl/serv_csr.v:46" *)
  reg [3:0] mcause3_0;
  (* src = "serv/rtl/serv_csr.v:44" *)
  reg [31:0] mepc;
  (* src = "serv/rtl/serv_csr.v:40" *)
  reg mie_mtie;
  (* src = "serv/rtl/serv_csr.v:43" *)
  reg [31:0] mscratch;
  (* src = "serv/rtl/serv_csr.v:38" *)
  reg mstatus;
  (* src = "serv/rtl/serv_csr.v:39" *)
  reg mstatus_mie;
  (* src = "serv/rtl/serv_csr.v:48" *)
  reg [31:0] mtval;
  (* init = 32'd0 *)
  (* src = "serv/rtl/serv_csr.v:41" *)
  reg [31:0] mtvec = 32'd0;
  (* src = "serv/rtl/serv_csr.v:23" *)
  output o_q;
  (* src = "serv/rtl/serv_csr.v:8" *)
  output o_timer_irq_en;
  assign _010_ = csr_out & (* src = "serv/rtl/serv_csr.v:56" *) _030_;
  assign _011_ = i_mstatus_en & (* src = "serv/rtl/serv_csr.v:60" *) mstatus;
  assign _012_ = i_mtvec_en & (* src = "serv/rtl/serv_csr.v:61" *) mtvec[0];
  assign _013_ = i_mscratch_en & (* src = "serv/rtl/serv_csr.v:62" *) mscratch[0];
  assign _014_ = i_mepc_en & (* src = "serv/rtl/serv_csr.v:63" *) mepc[0];
  assign _015_ = i_mcause_en & (* src = "serv/rtl/serv_csr.v:64" *) mcause;
  assign _016_ = i_mtval_en & (* src = "serv/rtl/serv_csr.v:65" *) mtval[0];
  assign o_timer_irq_en = mstatus_mie & (* src = "serv/rtl/serv_csr.v:69" *) mie_mtie;
  assign _009_ = _023_ & (* src = "serv/rtl/serv_csr.v:72" *) i_cnt_r[3];
  assign _017_ = i_mstatus_en & (* src = "serv/rtl/serv_csr.v:76" *) _028_;
  assign _018_ = _017_ & (* src = "serv/rtl/serv_csr.v:76" *) i_cnt_r[3];
  assign _019_ = i_mie_en & (* src = "serv/rtl/serv_csr.v:79" *) _029_;
  assign _020_ = _019_ & (* src = "serv/rtl/serv_csr.v:79" *) i_cnt_r[3];
  assign _021_ = _028_ & (* src = "serv/rtl/serv_csr.v:82" *) i_cnt_r[2];
  assign _005_ = _021_ & (* src = "serv/rtl/serv_csr.v:82" *) mstatus_mie;
  assign _022_ = i_mtip & (* src = "serv/rtl/serv_csr.v:85" *) o_timer_irq_en;
  assign _023_ = i_cnt[4:2] == (* src = "serv/rtl/serv_csr.v:100" *) 3'h7;
  assign _024_ = i_csr_source == (* src = "serv/rtl/serv_csr.v:54" *) 1'h1;
  assign _025_ = i_csr_source == (* src = "serv/rtl/serv_csr.v:55" *) 2'h2;
  assign _026_ = i_csr_source == (* src = "serv/rtl/serv_csr.v:56" *) 2'h3;
  assign _027_ = ! (* src = "serv/rtl/serv_csr.v:57" *) i_csr_source;
  assign _028_ = ! (* src = "serv/rtl/serv_csr.v:71" *) i_cnt[4:2];
  assign _029_ = i_cnt[4:2] == (* src = "serv/rtl/serv_csr.v:79" *) 1'h1;
  assign _030_ = ~ (* src = "serv/rtl/serv_csr.v:56" *) i_d;
  assign _031_ = i_mtval_en | (* src = "serv/rtl/serv_csr.v:104" *) i_trap;
  assign _032_ = csr_out | (* src = "serv/rtl/serv_csr.v:55" *) i_d;
  assign _033_ = _011_ | (* src = "serv/rtl/serv_csr.v:61" *) _012_;
  assign _034_ = _033_ | (* src = "serv/rtl/serv_csr.v:62" *) _013_;
  assign _035_ = _034_ | (* src = "serv/rtl/serv_csr.v:63" *) _014_;
  assign _036_ = _035_ | (* src = "serv/rtl/serv_csr.v:64" *) _015_;
  assign csr_out = _036_ | (* src = "serv/rtl/serv_csr.v:65" *) _016_;
  assign _037_ = i_mepc_en | (* src = "serv/rtl/serv_csr.v:94" *) i_trap;
  always @(posedge i_clk)
      mstatus <= _005_;
  always @(posedge i_clk)
      mstatus_mie <= _006_;
  always @(posedge i_clk)
      mie_mtie <= _003_;
  always @(posedge i_clk)
      mtvec <= _008_;
  always @(posedge i_clk)
      mscratch <= _004_;
  always @(posedge i_clk)
      mepc <= _002_;
  always @(posedge i_clk)
      mcause31 <= _000_;
  always @(posedge i_clk)
      mcause3_0 <= _001_;
  always @(posedge i_clk)
      mtval <= _007_;
  assign _007_ = _031_ ? (* src = "serv/rtl/serv_csr.v:104" *) { _042_, mtval[31:1] } : mtval;
  assign _038_ = i_trap ? (* src = "serv/rtl/serv_csr.v:84" *) _047_ : mcause3_0;
  assign _039_ = _028_ ? (* src = "serv/rtl/serv_csr.v:98" *) { csr_in, mcause3_0[3:1] } : _038_;
  assign _001_ = i_mcause_en ? (* src = "serv/rtl/serv_csr.v:97" *) _039_ : _038_;
  assign _040_ = i_trap ? (* src = "serv/rtl/serv_csr.v:84" *) _022_ : mcause31;
  assign _041_ = _009_ ? (* src = "serv/rtl/serv_csr.v:100" *) csr_in : _040_;
  assign _000_ = i_mcause_en ? (* src = "serv/rtl/serv_csr.v:97" *) _041_ : _040_;
  assign _002_ = _037_ ? (* src = "serv/rtl/serv_csr.v:94" *) { _048_, mepc[31:1] } : mepc;
  assign _004_ = i_mscratch_en ? (* src = "serv/rtl/serv_csr.v:88" *) { csr_in, mscratch[31:1] } : mscratch;
  assign _008_ = i_mtvec_en ? (* src = "serv/rtl/serv_csr.v:91" *) { csr_in, mtvec[31:1] } : mtvec;
  assign _003_ = _020_ ? (* src = "serv/rtl/serv_csr.v:79" *) csr_in : mie_mtie;
  assign _006_ = _018_ ? (* src = "serv/rtl/serv_csr.v:76" *) csr_in : mstatus_mie;
  assign _042_ = i_trap ? (* src = "serv/rtl/serv_csr.v:105" *) i_mtval : csr_in;
  assign _043_ = _027_ ? (* src = "serv/rtl/serv_csr.v:58" *) csr_out : 1'hx;
  assign _044_ = _026_ ? (* src = "serv/rtl/serv_csr.v:58" *) _010_ : _043_;
  assign _045_ = _025_ ? (* src = "serv/rtl/serv_csr.v:58" *) _032_ : _044_;
  assign csr_in = _024_ ? (* src = "serv/rtl/serv_csr.v:58" *) i_d : _045_;
  assign _046_ = _009_ ? (* src = "serv/rtl/serv_csr.v:73" *) mcause31 : 1'h0;
  assign mcause = _028_ ? (* src = "serv/rtl/serv_csr.v:73" *) mcause3_0[0] : _046_;
  assign _047_ = _022_ ? (* src = "serv/rtl/serv_csr.v:86" *) 4'h7 : i_mcause;
  assign _048_ = i_trap ? (* src = "serv/rtl/serv_csr.v:95" *) i_pc : csr_in;
  assign o_q = csr_out;
endmodule

(* src = "serv/rtl/serv_decode.v:2" *)
module serv_decode(clk, i_rst, i_mtip, i_timer_irq_en, i_wb_rdt, i_wb_en, i_rf_ready, o_cnt, o_cnt_r, o_cnt_done, o_bufreg_hold, o_bufreg_imm_en, o_bufreg_loop, o_ctrl_en, o_ctrl_pc_en, o_ctrl_jump, o_ctrl_jalr, o_ctrl_jal_or_jalr, o_ctrl_utype, o_ctrl_lui, o_ctrl_trap, o_ctrl_mret, i_ctrl_misalign, o_rf_rs_en, o_rf_rd_en, o_rf_rd_addr, o_rf_rs1_addr, o_rf_rs2_addr, o_alu_en, o_alu_init, o_alu_sub, o_alu_bool_op, o_alu_cmp_sel, o_alu_cmp_neg, o_alu_cmp_uns, i_alu_cmp, o_alu_shamt_en, o_alu_sh_signed, o_alu_sh_right, i_alu_sh_done, o_alu_rd_sel, o_mem_en, o_mem_cmd, o_mem_init, o_mem_bytecnt, i_mem_misalign, o_csr_mstatus_en, o_csr_mie_en, o_csr_mtvec_en, o_csr_mip_en, o_csr_mscratch_en, o_csr_mepc_en, o_csr_mcause_en, o_csr_mtval_en, o_csr_source, o_csr_mcause, o_csr_imm, o_csr_d_sel, o_funct3, o_imm, o_op_b_source, o_rd_alu_en, o_rd_mem_en);
  (* src = "serv/rtl/serv_decode.v:139" *)
  wire _000_;
  (* src = "serv/rtl/serv_decode.v:295" *)
  wire [4:0] _001_;
  (* src = "serv/rtl/serv_decode.v:295" *)
  wire _002_;
  (* src = "serv/rtl/serv_decode.v:208" *)
  wire _003_;
  (* src = "serv/rtl/serv_decode.v:208" *)
  wire [31:0] _004_;
  (* src = "serv/rtl/serv_decode.v:208" *)
  wire [1:0] _005_;
  (* src = "serv/rtl/serv_decode.v:295" *)
  wire _006_;
  (* src = "serv/rtl/serv_decode.v:295" *)
  wire [3:0] _007_;
  (* src = "serv/rtl/serv_decode.v:276" *)
  wire [3:0] _008_;
  (* src = "serv/rtl/serv_decode.v:295" *)
  wire _009_;
  (* src = "serv/rtl/serv_decode.v:208" *)
  wire [2:0] _010_;
  (* src = "serv/rtl/serv_decode.v:208" *)
  wire [4:0] _011_;
  (* src = "serv/rtl/serv_decode.v:208" *)
  wire [4:0] _012_;
  (* src = "serv/rtl/serv_decode.v:208" *)
  wire [4:0] _013_;
  (* src = "serv/rtl/serv_decode.v:208" *)
  wire _014_;
  (* src = "serv/rtl/serv_decode.v:208" *)
  wire _015_;
  (* src = "serv/rtl/serv_decode.v:208" *)
  wire _016_;
  (* src = "serv/rtl/serv_decode.v:208" *)
  wire _017_;
  (* src = "serv/rtl/serv_decode.v:208" *)
  wire [4:0] _018_;
  (* src = "serv/rtl/serv_decode.v:295" *)
  wire _019_;
  (* src = "serv/rtl/serv_decode.v:295" *)
  wire _020_;
  (* src = "serv/rtl/serv_decode.v:295" *)
  wire [1:0] _021_;
  (* src = "serv/rtl/serv_decode.v:165" *)
  wire [1:0] _022_;
  (* src = "serv/rtl/serv_decode.v:347" *)
  wire [4:0] _023_;
  (* src = "serv/rtl/serv_decode.v:103" *)
  wire _024_;
  (* src = "serv/rtl/serv_decode.v:110" *)
  wire _025_;
  (* src = "serv/rtl/serv_decode.v:122" *)
  wire _026_;
  (* src = "serv/rtl/serv_decode.v:122" *)
  wire _027_;
  (* src = "serv/rtl/serv_decode.v:125" *)
  wire _028_;
  (* src = "serv/rtl/serv_decode.v:125" *)
  wire _029_;
  (* src = "serv/rtl/serv_decode.v:126" *)
  wire _030_;
  (* src = "serv/rtl/serv_decode.v:126" *)
  wire _031_;
  (* src = "serv/rtl/serv_decode.v:131" *)
  wire _032_;
  (* src = "serv/rtl/serv_decode.v:153" *)
  wire _033_;
  (* src = "serv/rtl/serv_decode.v:154" *)
  wire _034_;
  (* src = "serv/rtl/serv_decode.v:155" *)
  wire _035_;
  (* src = "serv/rtl/serv_decode.v:155" *)
  wire _036_;
  (* src = "serv/rtl/serv_decode.v:155" *)
  wire _037_;
  (* src = "serv/rtl/serv_decode.v:155" *)
  wire _038_;
  (* src = "serv/rtl/serv_decode.v:156" *)
  wire _039_;
  (* src = "serv/rtl/serv_decode.v:156" *)
  wire _040_;
  (* src = "serv/rtl/serv_decode.v:156" *)
  wire _041_;
  (* src = "serv/rtl/serv_decode.v:157" *)
  wire _042_;
  (* src = "serv/rtl/serv_decode.v:157" *)
  wire _043_;
  (* src = "serv/rtl/serv_decode.v:157" *)
  wire _044_;
  (* src = "serv/rtl/serv_decode.v:158" *)
  wire _045_;
  (* src = "serv/rtl/serv_decode.v:162" *)
  wire _046_;
  (* src = "serv/rtl/serv_decode.v:188" *)
  wire _047_;
  (* src = "serv/rtl/serv_decode.v:251" *)
  wire _048_;
  (* src = "serv/rtl/serv_decode.v:252" *)
  wire _049_;
  (* src = "serv/rtl/serv_decode.v:252" *)
  wire _050_;
  (* src = "serv/rtl/serv_decode.v:252" *)
  wire _051_;
  (* src = "serv/rtl/serv_decode.v:252" *)
  wire _052_;
  (* src = "serv/rtl/serv_decode.v:254" *)
  wire _053_;
  (* src = "serv/rtl/serv_decode.v:257" *)
  wire _054_;
  (* src = "serv/rtl/serv_decode.v:257" *)
  wire _055_;
  (* src = "serv/rtl/serv_decode.v:257" *)
  wire _056_;
  (* src = "serv/rtl/serv_decode.v:267" *)
  wire _057_;
  (* src = "serv/rtl/serv_decode.v:303" *)
  wire _058_;
  (* src = "serv/rtl/serv_decode.v:303" *)
  wire _059_;
  (* src = "serv/rtl/serv_decode.v:314" *)
  wire _060_;
  (* src = "serv/rtl/serv_decode.v:318" *)
  wire _061_;
  (* src = "serv/rtl/serv_decode.v:318" *)
  wire _062_;
  (* src = "serv/rtl/serv_decode.v:325" *)
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire [3:0] _070_;
  (* src = "serv/rtl/serv_decode.v:105" *)
  wire _071_;
  (* src = "serv/rtl/serv_decode.v:106" *)
  wire _072_;
  (* src = "serv/rtl/serv_decode.v:108" *)
  wire _073_;
  (* src = "serv/rtl/serv_decode.v:110" *)
  wire _074_;
  (* src = "serv/rtl/serv_decode.v:118" *)
  wire _075_;
  (* src = "serv/rtl/serv_decode.v:188" *)
  wire _076_;
  (* src = "serv/rtl/serv_decode.v:288" *)
  wire _077_;
  (* src = "serv/rtl/serv_decode.v:298" *)
  wire _078_;
  (* src = "serv/rtl/serv_decode.v:306" *)
  wire _079_;
  (* src = "serv/rtl/serv_decode.v:101" *)
  wire _080_;
  (* src = "serv/rtl/serv_decode.v:101" *)
  wire _081_;
  (* src = "serv/rtl/serv_decode.v:110" *)
  wire _082_;
  (* src = "serv/rtl/serv_decode.v:110" *)
  wire _083_;
  (* src = "serv/rtl/serv_decode.v:113" *)
  wire _084_;
  (* src = "serv/rtl/serv_decode.v:126" *)
  wire _085_;
  (* src = "serv/rtl/serv_decode.v:153" *)
  wire _086_;
  (* src = "serv/rtl/serv_decode.v:153" *)
  wire _087_;
  (* src = "serv/rtl/serv_decode.v:154" *)
  wire _088_;
  (* src = "serv/rtl/serv_decode.v:251" *)
  wire _089_;
  (* src = "serv/rtl/serv_decode.v:251" *)
  wire _090_;
  (* src = "serv/rtl/serv_decode.v:252" *)
  wire _091_;
  (* src = "serv/rtl/serv_decode.v:252" *)
  wire _092_;
  (* src = "serv/rtl/serv_decode.v:255" *)
  wire _093_;
  (* src = "serv/rtl/serv_decode.v:303" *)
  wire _094_;
  (* src = "serv/rtl/serv_decode.v:314" *)
  wire _095_;
  (* src = "serv/rtl/serv_decode.v:193" *)
  wire _096_;
  (* src = "serv/rtl/serv_decode.v:254" *)
  wire _097_;
  (* src = "serv/rtl/serv_decode.v:254" *)
  wire _098_;
  (* src = "serv/rtl/serv_decode.v:257" *)
  wire _099_;
  (* src = "serv/rtl/serv_decode.v:257" *)
  wire _100_;
  (* src = "serv/rtl/serv_decode.v:116" *)
  wire _101_;
  (* src = "serv/rtl/serv_decode.v:125" *)
  wire _102_;
  (* src = "serv/rtl/serv_decode.v:126" *)
  wire _103_;
  (* src = "serv/rtl/serv_decode.v:188" *)
  wire _104_;
  (* src = "serv/rtl/serv_decode.v:188" *)
  wire _105_;
  (* src = "serv/rtl/serv_decode.v:232" *)
  wire _106_;
  (* src = "serv/rtl/serv_decode.v:252" *)
  wire _107_;
  (* src = "serv/rtl/serv_decode.v:257" *)
  wire _108_;
  (* src = "serv/rtl/serv_decode.v:288" *)
  wire _109_;
  (* src = "serv/rtl/serv_decode.v:288" *)
  wire _110_;
  (* src = "serv/rtl/serv_decode.v:316" *)
  wire _111_;
  (* src = "serv/rtl/serv_decode.v:325" *)
  wire _112_;
  (* src = "serv/rtl/serv_decode.v:327" *)
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire [1:0] _120_;
  wire [1:0] _121_;
  wire [1:0] _122_;
  wire [1:0] _123_;
  wire [1:0] _124_;
  wire [1:0] _125_;
  wire [1:0] _126_;
  wire [1:0] _127_;
  wire [1:0] _128_;
  wire _129_;
  wire _130_;
  wire [3:0] _131_;
  wire _132_;
  wire _133_;
  wire [3:0] _134_;
  wire [5:0] _135_;
  wire _136_;
  wire [7:0] _137_;
  wire [10:0] _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  (* src = "serv/rtl/serv_decode.v:110" *)
  wire _150_;
  (* src = "serv/rtl/serv_decode.v:193" *)
  wire _151_;
  (* src = "serv/rtl/serv_decode.v:231" *)
  wire [10:0] _152_;
  (* src = "serv/rtl/serv_decode.v:232" *)
  wire [7:0] _153_;
  (* src = "serv/rtl/serv_decode.v:236" *)
  wire _154_;
  (* src = "serv/rtl/serv_decode.v:236" *)
  wire _155_;
  (* src = "serv/rtl/serv_decode.v:236" *)
  wire _156_;
  (* src = "serv/rtl/serv_decode.v:237" *)
  wire [5:0] _157_;
  (* src = "serv/rtl/serv_decode.v:240" *)
  wire [3:0] _158_;
  (* src = "serv/rtl/serv_decode.v:240" *)
  wire [3:0] _159_;
  (* src = "serv/rtl/serv_decode.v:243" *)
  wire _160_;
  (* src = "serv/rtl/serv_decode.v:243" *)
  wire _161_;
  (* src = "serv/rtl/serv_decode.v:136" *)
  reg alu_sub_r;
  (* src = "serv/rtl/serv_decode.v:94" *)
  wire branch_op;
  (* src = "serv/rtl/serv_decode.v:251" *)
  wire btype;
  (* src = "serv/rtl/serv_decode.v:4" *)
  input clk;
  (* src = "serv/rtl/serv_decode.v:78" *)
  reg [4:0] cnt;
  (* src = "serv/rtl/serv_decode.v:79" *)
  reg cnt_done;
  (* src = "serv/rtl/serv_decode.v:270" *)
  wire cnt_en;
  (* src = "serv/rtl/serv_decode.v:162" *)
  wire csr_en;
  (* src = "serv/rtl/serv_decode.v:95" *)
  wire e_op;
  (* src = "serv/rtl/serv_decode.v:39" *)
  input i_alu_cmp;
  (* src = "serv/rtl/serv_decode.v:43" *)
  input i_alu_sh_done;
  (* src = "serv/rtl/serv_decode.v:26" *)
  input i_ctrl_misalign;
  (* src = "serv/rtl/serv_decode.v:49" *)
  input i_mem_misalign;
  (* src = "serv/rtl/serv_decode.v:6" *)
  input i_mtip;
  (* src = "serv/rtl/serv_decode.v:10" *)
  input i_rf_ready;
  (* src = "serv/rtl/serv_decode.v:5" *)
  input i_rst;
  (* src = "serv/rtl/serv_decode.v:7" *)
  input i_timer_irq_en;
  (* src = "serv/rtl/serv_decode.v:9" *)
  input i_wb_en;
  (* src = "serv/rtl/serv_decode.v:8" *)
  input [31:0] i_wb_rdt;
  (* src = "serv/rtl/serv_decode.v:82" *)
  reg [31:0] imm;
  (* src = "serv/rtl/serv_decode.v:97" *)
  reg imm30;
  (* src = "serv/rtl/serv_decode.v:257" *)
  wire iorjtype;
  (* src = "serv/rtl/serv_decode.v:252" *)
  wire itype;
  (* src = "serv/rtl/serv_decode.v:253" *)
  wire jtype;
  (* src = "serv/rtl/serv_decode.v:91" *)
  wire mem_op;
  (* src = "serv/rtl/serv_decode.v:292" *)
  reg mtip_r;
  (* src = "serv/rtl/serv_decode.v:35" *)
  output [1:0] o_alu_bool_op;
  (* src = "serv/rtl/serv_decode.v:37" *)
  output o_alu_cmp_neg;
  (* src = "serv/rtl/serv_decode.v:36" *)
  output o_alu_cmp_sel;
  (* src = "serv/rtl/serv_decode.v:38" *)
  output o_alu_cmp_uns;
  (* src = "serv/rtl/serv_decode.v:32" *)
  output o_alu_en;
  (* src = "serv/rtl/serv_decode.v:33" *)
  output o_alu_init;
  (* src = "serv/rtl/serv_decode.v:44" *)
  output [1:0] o_alu_rd_sel;
  reg [1:0] o_alu_rd_sel;
  (* src = "serv/rtl/serv_decode.v:42" *)
  output o_alu_sh_right;
  (* src = "serv/rtl/serv_decode.v:41" *)
  output o_alu_sh_signed;
  (* src = "serv/rtl/serv_decode.v:40" *)
  output o_alu_shamt_en;
  (* src = "serv/rtl/serv_decode.v:34" *)
  output o_alu_sub;
  (* src = "serv/rtl/serv_decode.v:14" *)
  output o_bufreg_hold;
  reg o_bufreg_hold;
  (* src = "serv/rtl/serv_decode.v:15" *)
  output o_bufreg_imm_en;
  (* src = "serv/rtl/serv_decode.v:16" *)
  output o_bufreg_loop;
  (* src = "serv/rtl/serv_decode.v:11" *)
  output [4:0] o_cnt;
  (* src = "serv/rtl/serv_decode.v:13" *)
  output o_cnt_done;
  (* src = "serv/rtl/serv_decode.v:12" *)
  output [3:0] o_cnt_r;
  reg [3:0] o_cnt_r;
  (* src = "serv/rtl/serv_decode.v:61" *)
  output o_csr_d_sel;
  (* src = "serv/rtl/serv_decode.v:60" *)
  output o_csr_imm;
  (* src = "serv/rtl/serv_decode.v:59" *)
  output [3:0] o_csr_mcause;
  reg [3:0] o_csr_mcause;
  (* src = "serv/rtl/serv_decode.v:56" *)
  output o_csr_mcause_en;
  (* src = "serv/rtl/serv_decode.v:55" *)
  output o_csr_mepc_en;
  (* src = "serv/rtl/serv_decode.v:51" *)
  output o_csr_mie_en;
  (* src = "serv/rtl/serv_decode.v:53" *)
  output o_csr_mip_en;
  (* src = "serv/rtl/serv_decode.v:54" *)
  output o_csr_mscratch_en;
  (* src = "serv/rtl/serv_decode.v:50" *)
  output o_csr_mstatus_en;
  (* src = "serv/rtl/serv_decode.v:57" *)
  output o_csr_mtval_en;
  (* src = "serv/rtl/serv_decode.v:52" *)
  output o_csr_mtvec_en;
  (* src = "serv/rtl/serv_decode.v:58" *)
  output [1:0] o_csr_source;
  (* src = "serv/rtl/serv_decode.v:17" *)
  output o_ctrl_en;
  (* src = "serv/rtl/serv_decode.v:21" *)
  output o_ctrl_jal_or_jalr;
  (* src = "serv/rtl/serv_decode.v:20" *)
  output o_ctrl_jalr;
  (* src = "serv/rtl/serv_decode.v:19" *)
  output o_ctrl_jump;
  reg o_ctrl_jump;
  (* src = "serv/rtl/serv_decode.v:23" *)
  output o_ctrl_lui;
  (* src = "serv/rtl/serv_decode.v:25" *)
  output o_ctrl_mret;
  (* src = "serv/rtl/serv_decode.v:18" *)
  output o_ctrl_pc_en;
  (* src = "serv/rtl/serv_decode.v:24" *)
  output o_ctrl_trap;
  (* src = "serv/rtl/serv_decode.v:22" *)
  output o_ctrl_utype;
  (* src = "serv/rtl/serv_decode.v:62" *)
  output [2:0] o_funct3;
  reg [2:0] o_funct3;
  (* src = "serv/rtl/serv_decode.v:63" *)
  output o_imm;
  (* src = "serv/rtl/serv_decode.v:48" *)
  output [1:0] o_mem_bytecnt;
  (* src = "serv/rtl/serv_decode.v:46" *)
  output o_mem_cmd;
  (* src = "serv/rtl/serv_decode.v:45" *)
  output o_mem_en;
  (* src = "serv/rtl/serv_decode.v:47" *)
  output o_mem_init;
  (* src = "serv/rtl/serv_decode.v:64" *)
  output o_op_b_source;
  (* src = "serv/rtl/serv_decode.v:65" *)
  output o_rd_alu_en;
  (* src = "serv/rtl/serv_decode.v:66" *)
  output o_rd_mem_en;
  (* src = "serv/rtl/serv_decode.v:29" *)
  output [4:0] o_rf_rd_addr;
  reg [4:0] o_rf_rd_addr;
  (* src = "serv/rtl/serv_decode.v:28" *)
  output o_rf_rd_en;
  (* src = "serv/rtl/serv_decode.v:30" *)
  output [4:0] o_rf_rs1_addr;
  reg [4:0] o_rf_rs1_addr;
  (* src = "serv/rtl/serv_decode.v:31" *)
  output [4:0] o_rf_rs2_addr;
  reg [4:0] o_rf_rs2_addr;
  (* src = "serv/rtl/serv_decode.v:27" *)
  output o_rf_rs_en;
  (* src = "serv/rtl/serv_decode.v:83" *)
  reg op20;
  (* src = "serv/rtl/serv_decode.v:84" *)
  reg op21;
  (* src = "serv/rtl/serv_decode.v:85" *)
  reg op22;
  (* src = "serv/rtl/serv_decode.v:86" *)
  reg op26;
  (* src = "serv/rtl/serv_decode.v:249" *)
  wire [4:0] op_code;
  (* src = "serv/rtl/serv_decode.v:103" *)
  wire op_or_opimm;
  (* src = "serv/rtl/serv_decode.v:81" *)
  reg [4:0] opcode;
  (* src = "serv/rtl/serv_decode.v:293" *)
  reg pending_irq;
  (* src = "serv/rtl/serv_decode.v:90" *)
  wire running;
  (* src = "serv/rtl/serv_decode.v:92" *)
  wire shift_op;
  (* src = "serv/rtl/serv_decode.v:259" *)
  wire sign_bit;
  (* src = "serv/rtl/serv_decode.v:93" *)
  wire slt_op;
  (* src = "serv/rtl/serv_decode.v:258" *)
  wire sorbtype;
  (* src = "serv/rtl/serv_decode.v:290" *)
  reg stage_one_done;
  (* src = "serv/rtl/serv_decode.v:76" *)
  reg [1:0] state;
  (* src = "serv/rtl/serv_decode.v:254" *)
  wire stype;
  (* src = "serv/rtl/serv_decode.v:116" *)
  wire take_branch;
  (* src = "serv/rtl/serv_decode.v:287" *)
  wire two_stage_op;
  (* src = "serv/rtl/serv_decode.v:255" *)
  wire utype;
  assign _023_ = cnt + (* src = "serv/rtl/serv_decode.v:347" *) cnt_en;
  assign mem_op = o_rd_mem_en & (* src = "serv/rtl/serv_decode.v:101" *) _081_;
  assign op_or_opimm = _024_ & (* src = "serv/rtl/serv_decode.v:103" *) _081_;
  assign shift_op = op_or_opimm & (* src = "serv/rtl/serv_decode.v:105" *) _071_;
  assign slt_op = op_or_opimm & (* src = "serv/rtl/serv_decode.v:106" *) _072_;
  assign branch_op = _073_ & (* src = "serv/rtl/serv_decode.v:108" *) _081_;
  assign _025_ = _074_ & (* src = "serv/rtl/serv_decode.v:110" *) _082_;
  assign e_op = _025_ & (* src = "serv/rtl/serv_decode.v:110" *) _083_;
  assign o_bufreg_loop = op_or_opimm & (* src = "serv/rtl/serv_decode.v:113" *) _084_;
  assign take_branch = _073_ & (* src = "serv/rtl/serv_decode.v:116" *) _101_;
  assign o_ctrl_jalr = opcode[4] & (* src = "serv/rtl/serv_decode.v:118" *) _075_;
  assign _024_ = _080_ & (* src = "serv/rtl/serv_decode.v:120" *) opcode[2];
  assign o_ctrl_utype = _024_ & (* src = "serv/rtl/serv_decode.v:120" *) opcode[0];
  assign o_ctrl_jal_or_jalr = opcode[4] & (* src = "serv/rtl/serv_decode.v:121" *) opcode[0];
  assign _026_ = opcode[4] & (* src = "serv/rtl/serv_decode.v:122" *) opcode[2];
  assign _027_ = _026_ & (* src = "serv/rtl/serv_decode.v:122" *) op21;
  assign o_ctrl_mret = _027_ & (* src = "serv/rtl/serv_decode.v:122" *) _083_;
  assign _028_ = o_bufreg_imm_en & (* src = "serv/rtl/serv_decode.v:125" *) opcode[4];
  assign _029_ = _028_ & (* src = "serv/rtl/serv_decode.v:125" *) opcode[0];
  assign _030_ = o_bufreg_imm_en & (* src = "serv/rtl/serv_decode.v:126" *) _085_;
  assign _031_ = _030_ & (* src = "serv/rtl/serv_decode.v:126" *) _081_;
  assign o_rf_rd_en = running & (* src = "serv/rtl/serv_decode.v:126" *) _103_;
  assign _032_ = opcode[0] & (* src = "serv/rtl/serv_decode.v:131" *) _080_;
  assign o_ctrl_lui = _032_ & (* src = "serv/rtl/serv_decode.v:131" *) opcode[3];
  assign _000_ = opcode[3] & (* src = "serv/rtl/serv_decode.v:140" *) imm30;
  assign o_alu_cmp_neg = branch_op & (* src = "serv/rtl/serv_decode.v:142" *) o_funct3[0];
  assign _033_ = csr_en & (* src = "serv/rtl/serv_decode.v:153" *) _086_;
  assign o_csr_mstatus_en = _033_ & (* src = "serv/rtl/serv_decode.v:153" *) _087_;
  assign _034_ = _033_ & (* src = "serv/rtl/serv_decode.v:154" *) op22;
  assign o_csr_mie_en = _034_ & (* src = "serv/rtl/serv_decode.v:154" *) _088_;
  assign _035_ = _086_ & (* src = "serv/rtl/serv_decode.v:155" *) op20;
  assign _036_ = _035_ & (* src = "serv/rtl/serv_decode.v:155" *) opcode[4];
  assign _037_ = _036_ & (* src = "serv/rtl/serv_decode.v:155" *) opcode[2];
  assign _038_ = _037_ & (* src = "serv/rtl/serv_decode.v:155" *) state[1];
  assign _039_ = csr_en & (* src = "serv/rtl/serv_decode.v:156" *) op26;
  assign _040_ = _039_ & (* src = "serv/rtl/serv_decode.v:156" *) _087_;
  assign _041_ = _040_ & (* src = "serv/rtl/serv_decode.v:156" *) _082_;
  assign o_csr_mscratch_en = _041_ & (* src = "serv/rtl/serv_decode.v:156" *) _088_;
  assign _042_ = _039_ & (* src = "serv/rtl/serv_decode.v:157" *) _082_;
  assign _043_ = _042_ & (* src = "serv/rtl/serv_decode.v:157" *) op20;
  assign _044_ = o_ctrl_mret & (* src = "serv/rtl/serv_decode.v:157" *) state[1];
  assign _045_ = csr_en & (* src = "serv/rtl/serv_decode.v:158" *) op21;
  assign o_csr_mcause_en = _045_ & (* src = "serv/rtl/serv_decode.v:158" *) _088_;
  assign o_csr_mtval_en = _045_ & (* src = "serv/rtl/serv_decode.v:159" *) op20;
  assign o_csr_mip_en = _039_ & (* src = "serv/rtl/serv_decode.v:160" *) op22;
  assign _046_ = _026_ & (* src = "serv/rtl/serv_decode.v:162" *) _150_;
  assign csr_en = _046_ & (* src = "serv/rtl/serv_decode.v:162" *) running;
  assign _047_ = _076_ & (* src = "serv/rtl/serv_decode.v:188" *) o_funct3[1];
  assign o_alu_shamt_en = _096_ & (* src = "serv/rtl/serv_decode.v:196" *) o_alu_init;
  assign o_mem_en = mem_op & (* src = "serv/rtl/serv_decode.v:200" *) cnt_en;
  assign o_mem_init = mem_op & (* src = "serv/rtl/serv_decode.v:203" *) o_alu_init;
  assign _048_ = i_wb_rdt[6] & (* src = "serv/rtl/serv_decode.v:251" *) _089_;
  assign btype = _048_ & (* src = "serv/rtl/serv_decode.v:251" *) _090_;
  assign _049_ = _091_ & (* src = "serv/rtl/serv_decode.v:252" *) _090_;
  assign _050_ = _089_ & (* src = "serv/rtl/serv_decode.v:252" *) _092_;
  assign _051_ = _050_ & (* src = "serv/rtl/serv_decode.v:252" *) i_wb_rdt[2];
  assign _052_ = _090_ & (* src = "serv/rtl/serv_decode.v:252" *) i_wb_rdt[4];
  assign _053_ = i_wb_rdt[5] & (* src = "serv/rtl/serv_decode.v:254" *) _097_;
  assign stype = _053_ & (* src = "serv/rtl/serv_decode.v:254" *) _098_;
  assign utype = _093_ & (* src = "serv/rtl/serv_decode.v:255" *) i_wb_rdt[2];
  assign _054_ = i_wb_rdt[2] & (* src = "serv/rtl/serv_decode.v:257" *) _097_;
  assign _055_ = i_wb_rdt[4] & (* src = "serv/rtl/serv_decode.v:257" *) _099_;
  assign _056_ = _099_ & (* src = "serv/rtl/serv_decode.v:257" *) _100_;
  assign _057_ = _081_ & (* src = "serv/rtl/serv_decode.v:267" *) opcode[2];
  assign o_rd_alu_en = _057_ & (* src = "serv/rtl/serv_decode.v:267" *) _080_;
  assign o_rd_mem_en = o_bufreg_imm_en & (* src = "serv/rtl/serv_decode.v:268" *) _080_;
  assign _058_ = i_mtip & (* src = "serv/rtl/serv_decode.v:303" *) _094_;
  assign _059_ = _058_ & (* src = "serv/rtl/serv_decode.v:303" *) i_timer_irq_en;
  assign _002_ = _079_ & (* src = "serv/rtl/serv_decode.v:306" *) o_cnt_r[2];
  assign _060_ = two_stage_op & (* src = "serv/rtl/serv_decode.v:314" *) _095_;
  assign _061_ = i_alu_sh_done & (* src = "serv/rtl/serv_decode.v:318" *) shift_op;
  assign _062_ = _061_ & (* src = "serv/rtl/serv_decode.v:318" *) stage_one_done;
  assign _063_ = take_branch & (* src = "serv/rtl/serv_decode.v:325" *) i_ctrl_misalign;
  assign _064_ = | { _139_, _141_ };
  assign _065_ = | { _140_, _142_ };
  assign _066_ = | { _139_, _147_ };
  assign _067_ = | { _146_, _148_, _149_ };
  assign _068_ = | { o_funct3[2], _072_ };
  assign _069_ = | { o_ctrl_trap, running };
  assign _071_ = o_funct3[1:0] == (* src = "serv/rtl/serv_decode.v:105" *) 1'h1;
  assign _072_ = o_funct3[2:1] == (* src = "serv/rtl/serv_decode.v:106" *) 1'h1;
  assign _073_ = opcode[4:2] == (* src = "serv/rtl/serv_decode.v:108" *) 3'h6;
  assign _074_ = opcode[4:2] == (* src = "serv/rtl/serv_decode.v:110" *) 3'h7;
  assign o_alu_init = state == (* src = "serv/rtl/serv_decode.v:113" *) 1'h1;
  assign _075_ = opcode[1:0] == (* src = "serv/rtl/serv_decode.v:118" *) 1'h1;
  assign o_ctrl_trap = state == (* src = "serv/rtl/serv_decode.v:155" *) 2'h3;
  assign _076_ = ! (* src = "serv/rtl/serv_decode.v:188" *) o_rf_rs1_addr;
  assign sorbtype = i_wb_rdt[5:2] == (* src = "serv/rtl/serv_decode.v:258" *) 4'h8;
  assign running = state == (* src = "serv/rtl/serv_decode.v:272" *) 2'h2;
  assign _077_ = ! (* src = "serv/rtl/serv_decode.v:288" *) opcode[2:1];
  assign _078_ = ! (* src = "serv/rtl/serv_decode.v:298" *) state;
  assign _079_ = cnt[4:2] == (* src = "serv/rtl/serv_decode.v:306" *) 3'h7;
  assign _080_ = ! (* src = "serv/rtl/serv_decode.v:101" *) opcode[4];
  assign o_bufreg_imm_en = ! (* src = "serv/rtl/serv_decode.v:101" *) opcode[2];
  assign _081_ = ! (* src = "serv/rtl/serv_decode.v:101" *) opcode[0];
  assign _082_ = ! (* src = "serv/rtl/serv_decode.v:110" *) op21;
  assign _083_ = ! (* src = "serv/rtl/serv_decode.v:110" *) _150_;
  assign _084_ = ! (* src = "serv/rtl/serv_decode.v:113" *) o_alu_init;
  assign _085_ = ! (* src = "serv/rtl/serv_decode.v:126" *) opcode[3];
  assign _086_ = ! (* src = "serv/rtl/serv_decode.v:153" *) op26;
  assign _087_ = ! (* src = "serv/rtl/serv_decode.v:153" *) op22;
  assign _088_ = ! (* src = "serv/rtl/serv_decode.v:154" *) op20;
  assign _089_ = ! (* src = "serv/rtl/serv_decode.v:251" *) i_wb_rdt[4];
  assign _090_ = ! (* src = "serv/rtl/serv_decode.v:251" *) i_wb_rdt[2];
  assign _091_ = ! (* src = "serv/rtl/serv_decode.v:252" *) i_wb_rdt[5];
  assign _092_ = ! (* src = "serv/rtl/serv_decode.v:252" *) i_wb_rdt[3];
  assign _093_ = ! (* src = "serv/rtl/serv_decode.v:255" *) i_wb_rdt[6];
  assign _094_ = ! (* src = "serv/rtl/serv_decode.v:303" *) mtip_r;
  assign _095_ = ! (* src = "serv/rtl/serv_decode.v:314" *) stage_one_done;
  assign _096_ = cnt < (* src = "serv/rtl/serv_decode.v:193" *) 3'h5;
  assign cnt_en = | (* src = "serv/rtl/serv_decode.v:270" *) state;
  assign _097_ = ~ (* src = "serv/rtl/serv_decode.v:254" *) i_wb_rdt[4];
  assign _098_ = ~ (* src = "serv/rtl/serv_decode.v:254" *) i_wb_rdt[6];
  assign _099_ = ~ (* src = "serv/rtl/serv_decode.v:257" *) i_wb_rdt[2];
  assign _100_ = ~ (* src = "serv/rtl/serv_decode.v:257" *) i_wb_rdt[5];
  assign o_ctrl_pc_en = running | (* src = "serv/rtl/serv_decode.v:115" *) o_ctrl_trap;
  assign _101_ = opcode[0] | (* src = "serv/rtl/serv_decode.v:116" *) i_alu_cmp;
  assign _102_ = opcode[2] | (* src = "serv/rtl/serv_decode.v:125" *) _029_;
  assign _103_ = _102_ | (* src = "serv/rtl/serv_decode.v:126" *) _031_;
  assign o_csr_mtvec_en = _038_ | (* src = "serv/rtl/serv_decode.v:155" *) o_ctrl_trap;
  assign o_csr_mepc_en = _043_ | (* src = "serv/rtl/serv_decode.v:157" *) _044_;
  assign _104_ = _047_ | (* src = "serv/rtl/serv_decode.v:188" *) o_ctrl_trap;
  assign _105_ = _104_ | (* src = "serv/rtl/serv_decode.v:188" *) o_ctrl_mret;
  assign _106_ = utype | (* src = "serv/rtl/serv_decode.v:232" *) i_wb_rdt[3];
  assign _107_ = _049_ | (* src = "serv/rtl/serv_decode.v:252" *) _051_;
  assign itype = _107_ | (* src = "serv/rtl/serv_decode.v:252" *) _052_;
  assign _108_ = _054_ | (* src = "serv/rtl/serv_decode.v:257" *) _055_;
  assign iorjtype = _108_ | (* src = "serv/rtl/serv_decode.v:257" *) _056_;
  assign _109_ = slt_op | (* src = "serv/rtl/serv_decode.v:288" *) _073_;
  assign _110_ = _109_ | (* src = "serv/rtl/serv_decode.v:288" *) _077_;
  assign two_stage_op = _110_ | (* src = "serv/rtl/serv_decode.v:289" *) shift_op;
  assign _111_ = e_op | (* src = "serv/rtl/serv_decode.v:316" *) pending_irq;
  assign _112_ = i_mem_misalign | (* src = "serv/rtl/serv_decode.v:325" *) _063_;
  assign _113_ = mem_op | (* src = "serv/rtl/serv_decode.v:327" *) shift_op;
  always @(posedge clk)
      cnt <= _001_;
  always @(posedge clk)
      cnt_done <= _002_;
  always @(posedge clk)
      o_cnt_r <= _007_;
  always @(posedge clk)
      o_bufreg_hold <= _006_;
  always @(posedge clk)
      o_ctrl_jump <= _009_;
  always @(posedge clk)
      state <= _021_;
  always @(posedge clk)
      stage_one_done <= _020_;
  always @(posedge clk)
      mtip_r <= i_mtip;
  always @(posedge clk)
      pending_irq <= _019_;
  always @(posedge clk)
      o_csr_mcause <= _008_;
  always @(posedge clk)
      imm <= _004_;
  always @(posedge clk)
      o_funct3 <= _010_;
  always @(posedge clk)
      o_alu_rd_sel <= _005_;
  always @(posedge clk)
      o_rf_rd_addr <= _011_;
  always @(posedge clk)
      o_rf_rs1_addr <= _012_;
  always @(posedge clk)
      o_rf_rs2_addr <= _013_;
  always @(posedge clk)
      opcode <= _018_;
  always @(posedge clk)
      op20 <= _014_;
  always @(posedge clk)
      op21 <= _015_;
  always @(posedge clk)
      op22 <= _016_;
  always @(posedge clk)
      op26 <= _017_;
  always @(posedge clk)
      imm30 <= _003_;
  always @(posedge clk)
      alu_sub_r <= _000_;
  assign _001_ = i_rst ? (* src = "serv/rtl/serv_decode.v:351" *) 5'h00 : _023_;
  assign _114_ = _113_ ? (* full_case = 32'd1 *) (* src = "serv/rtl/serv_decode.v:327" *) 1'h1 : 1'h0;
  assign _115_ = _112_ ? (* full_case = 32'd1 *) (* src = "serv/rtl/serv_decode.v:325" *) 1'h0 : _114_;
  assign _116_ = cnt_done ? (* src = "serv/rtl/serv_decode.v:324" *) _115_ : 1'h0;
  assign _006_ = o_alu_init ? (* full_case = 32'd1 *) (* src = "serv/rtl/serv_decode.v:321|serv/rtl/serv_decode.v:310" *) _116_ : 1'h0;
  assign _117_ = _059_ ? (* src = "serv/rtl/serv_decode.v:303" *) 1'h1 : pending_irq;
  assign _118_ = o_ctrl_trap ? (* full_case = 32'd1 *) (* src = "serv/rtl/serv_decode.v:339|serv/rtl/serv_decode.v:310" *) 1'h0 : _117_;
  assign _019_ = i_rst ? (* src = "serv/rtl/serv_decode.v:351" *) 1'h0 : _118_;
  function [0:0] _327_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "serv/rtl/serv_decode.v:334|serv/rtl/serv_decode.v:310" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _327_ = b[0:0];
      2'b1?:
        _327_ = b[1:1];
      default:
        _327_ = a;
    endcase
  endfunction
  assign _119_ = _327_(stage_one_done, 2'h2, { o_alu_init, running });
  assign _020_ = i_rst ? (* src = "serv/rtl/serv_decode.v:351" *) 1'h0 : _119_;
  assign _120_ = cnt_done ? (* src = "serv/rtl/serv_decode.v:341" *) 2'h0 : state;
  function [1:0] _330_;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "serv/rtl/serv_decode.v:339|serv/rtl/serv_decode.v:310" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        _330_ = b[1:0];
      3'b?1?:
        _330_ = b[3:2];
      3'b1??:
        _330_ = b[5:4];
      default:
        _330_ = a;
    endcase
  endfunction
  assign _121_ = _330_(state, { _128_, _124_, _120_ }, { _078_, o_alu_init, _069_ });
  assign _122_ = _113_ ? (* full_case = 32'd1 *) (* src = "serv/rtl/serv_decode.v:327" *) 2'h0 : 2'h2;
  assign _123_ = _112_ ? (* full_case = 32'd1 *) (* src = "serv/rtl/serv_decode.v:325" *) 2'h3 : _122_;
  assign _124_ = cnt_done ? (* src = "serv/rtl/serv_decode.v:324" *) _123_ : state;
  assign _125_ = _062_ ? (* src = "serv/rtl/serv_decode.v:318" *) 2'h2 : state;
  assign _126_ = _060_ ? (* src = "serv/rtl/serv_decode.v:314" *) 2'h1 : 2'h2;
  assign _127_ = _111_ ? (* src = "serv/rtl/serv_decode.v:316" *) 2'h3 : _126_;
  assign _128_ = i_rf_ready ? (* full_case = 32'd1 *) (* src = "serv/rtl/serv_decode.v:312" *) _127_ : _125_;
  assign _021_ = i_rst ? (* src = "serv/rtl/serv_decode.v:351" *) 2'h0 : _121_;
  assign _129_ = o_alu_init ? (* src = "serv/rtl/serv_decode.v:296" *) take_branch : o_ctrl_jump;
  assign _130_ = _078_ ? (* src = "serv/rtl/serv_decode.v:298" *) 1'h0 : _129_;
  assign _009_ = i_rst ? (* src = "serv/rtl/serv_decode.v:351" *) 1'h0 : _130_;
  assign _131_ = cnt_en ? (* src = "serv/rtl/serv_decode.v:348" *) { o_cnt_r[2:0], o_cnt_r[3] } : o_cnt_r;
  assign _007_ = i_rst ? (* src = "serv/rtl/serv_decode.v:351" *) 4'h1 : _131_;
  assign _070_[2:0] = i_mem_misalign ? (* src = "serv/rtl/serv_decode.v:278" *) { 1'h1, opcode[3], 1'h0 } : 3'h0;
  assign _008_ = e_op ? (* src = "serv/rtl/serv_decode.v:280" *) { _088_, 3'h3 } : { 1'h0, _070_[2:0] };
  assign _132_ = i_wb_en ? (* src = "serv/rtl/serv_decode.v:218" *) i_wb_rdt[31] : imm[31];
  assign _004_[31] = cnt_en ? (* src = "serv/rtl/serv_decode.v:245" *) imm[0] : _132_;
  assign _133_ = i_wb_en ? (* src = "serv/rtl/serv_decode.v:218" *) _161_ : imm[0];
  assign _004_[0] = cnt_en ? (* src = "serv/rtl/serv_decode.v:245" *) imm[1] : _133_;
  assign _134_ = i_wb_en ? (* src = "serv/rtl/serv_decode.v:218" *) _159_ : imm[4:1];
  assign _004_[4:1] = cnt_en ? (* src = "serv/rtl/serv_decode.v:245" *) imm[5:2] : _134_;
  assign _135_ = i_wb_en ? (* src = "serv/rtl/serv_decode.v:218" *) _157_ : imm[10:5];
  assign _004_[10:5] = cnt_en ? (* src = "serv/rtl/serv_decode.v:245" *) imm[11:6] : _135_;
  assign _136_ = i_wb_en ? (* src = "serv/rtl/serv_decode.v:218" *) _156_ : imm[11];
  assign _004_[11] = cnt_en ? (* src = "serv/rtl/serv_decode.v:245" *) imm[12] : _136_;
  assign _137_ = i_wb_en ? (* src = "serv/rtl/serv_decode.v:218" *) _153_ : imm[19:12];
  assign _004_[19:12] = cnt_en ? (* src = "serv/rtl/serv_decode.v:245" *) imm[20:13] : _137_;
  assign _138_ = i_wb_en ? (* src = "serv/rtl/serv_decode.v:218" *) _152_ : imm[30:20];
  assign _004_[30:20] = cnt_en ? (* src = "serv/rtl/serv_decode.v:245" *) imm[31:21] : _138_;
  assign _003_ = i_wb_en ? (* src = "serv/rtl/serv_decode.v:218" *) i_wb_rdt[30] : imm30;
  assign _017_ = i_wb_en ? (* src = "serv/rtl/serv_decode.v:218" *) i_wb_rdt[26] : op26;
  assign _016_ = i_wb_en ? (* src = "serv/rtl/serv_decode.v:218" *) i_wb_rdt[22] : op22;
  assign _015_ = i_wb_en ? (* src = "serv/rtl/serv_decode.v:218" *) i_wb_rdt[21] : op21;
  assign _014_ = i_wb_en ? (* src = "serv/rtl/serv_decode.v:218" *) i_wb_rdt[20] : op20;
  assign _018_ = i_wb_en ? (* src = "serv/rtl/serv_decode.v:218" *) i_wb_rdt[6:2] : opcode;
  assign _013_ = i_wb_en ? (* src = "serv/rtl/serv_decode.v:218" *) i_wb_rdt[24:20] : o_rf_rs2_addr;
  assign _012_ = i_wb_en ? (* src = "serv/rtl/serv_decode.v:218" *) i_wb_rdt[19:15] : o_rf_rs1_addr;
  assign _011_ = i_wb_en ? (* src = "serv/rtl/serv_decode.v:218" *) i_wb_rdt[11:7] : o_rf_rd_addr;
  assign _010_ = i_wb_en ? (* src = "serv/rtl/serv_decode.v:218" *) i_wb_rdt[14:12] : o_funct3;
  function [1:0] _370_;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    (* full_case = 32'd1 *)
    (* src = "serv/rtl/serv_decode.v:215|serv/rtl/serv_decode.v:209" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        _370_ = b[1:0];
      4'b??1?:
        _370_ = b[3:2];
      4'b?1??:
        _370_ = b[5:4];
      4'b1???:
        _370_ = b[7:6];
      default:
        _370_ = a;
    endcase
  endfunction
  assign _005_ = _370_(2'hx, 8'h27, { _143_, _072_, _065_, _064_ });
  assign _139_ = o_funct3[2:1] == (* full_case = 32'd1 *) (* src = "serv/rtl/serv_decode.v:215|serv/rtl/serv_decode.v:209" *) 2'h3;
  assign _140_ = o_funct3 == (* full_case = 32'd1 *) (* src = "serv/rtl/serv_decode.v:214|serv/rtl/serv_decode.v:209" *) 3'h5;
  assign _141_ = o_funct3 == (* full_case = 32'd1 *) (* src = "serv/rtl/serv_decode.v:213|serv/rtl/serv_decode.v:209" *) 3'h4;
  assign _142_ = o_funct3 == (* full_case = 32'd1 *) (* src = "serv/rtl/serv_decode.v:211|serv/rtl/serv_decode.v:209" *) 1'h1;
  assign _143_ = ! (* full_case = 32'd1 *) (* src = "serv/rtl/serv_decode.v:210|serv/rtl/serv_decode.v:209" *) o_funct3;
  assign o_csr_source = _105_ ? (* full_case = 32'd1 *) (* src = "serv/rtl/serv_decode.v:188" *) 2'h0 : _022_;
  function [1:0] _377_;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* full_case = 32'd1 *)
    (* src = "serv/rtl/serv_decode.v:185|serv/rtl/serv_decode.v:182" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        _377_ = b[1:0];
      3'b?1?:
        _377_ = b[3:2];
      3'b1??:
        _377_ = b[5:4];
      default:
        _377_ = a;
    endcase
  endfunction
  assign _022_ = _377_(2'hx, 6'h1b, { _071_, _145_, _144_ });
  assign _144_ = o_funct3[1:0] == (* full_case = 32'd1 *) (* src = "serv/rtl/serv_decode.v:185|serv/rtl/serv_decode.v:182" *) 2'h3;
  assign _145_ = o_funct3[1:0] == (* full_case = 32'd1 *) (* src = "serv/rtl/serv_decode.v:184|serv/rtl/serv_decode.v:182" *) 2'h2;
  function [0:0] _380_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "serv/rtl/serv_decode.v:178|serv/rtl/serv_decode.v:173" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _380_ = b[0:0];
      2'b1?:
        _380_ = b[1:1];
      default:
        _380_ = a;
    endcase
  endfunction
  assign o_alu_cmp_uns = _380_(1'hx, 2'h1, { _067_, _066_ });
  assign _146_ = o_funct3[2:1] == (* full_case = 32'd1 *) (* src = "serv/rtl/serv_decode.v:177|serv/rtl/serv_decode.v:173" *) 2'h2;
  assign _147_ = o_funct3 == (* full_case = 32'd1 *) (* src = "serv/rtl/serv_decode.v:176|serv/rtl/serv_decode.v:173" *) 2'h3;
  assign _148_ = o_funct3 == (* full_case = 32'd1 *) (* src = "serv/rtl/serv_decode.v:175|serv/rtl/serv_decode.v:173" *) 2'h2;
  assign _149_ = ! (* full_case = 32'd1 *) (* src = "serv/rtl/serv_decode.v:174|serv/rtl/serv_decode.v:173" *) o_funct3[2:1];
  function [0:0] _385_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "serv/rtl/serv_decode.v:169|serv/rtl/serv_decode.v:166" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _385_ = b[0:0];
      2'b1?:
        _385_ = b[1:1];
      default:
        _385_ = a;
    endcase
  endfunction
  assign o_alu_cmp_sel = _385_(1'hx, 2'h2, { _149_, _068_ });
  assign _150_ = | (* src = "serv/rtl/serv_decode.v:110" *) { o_funct3[0], o_funct3[1], o_funct3[2] };
  wire [4:0] _400_ = o_rf_rs1_addr;
  assign _151_ = _400_[cnt[2:0] +: 1];
  assign o_csr_imm = _096_ ? (* src = "serv/rtl/serv_decode.v:193" *) _151_ : 1'h0;
  assign _152_ = utype ? (* src = "serv/rtl/serv_decode.v:231" *) i_wb_rdt[30:20] : { i_wb_rdt[31], i_wb_rdt[31], i_wb_rdt[31], i_wb_rdt[31], i_wb_rdt[31], i_wb_rdt[31], i_wb_rdt[31], i_wb_rdt[31], i_wb_rdt[31], i_wb_rdt[31], i_wb_rdt[31] };
  assign _153_ = _106_ ? (* src = "serv/rtl/serv_decode.v:232" *) i_wb_rdt[19:12] : { i_wb_rdt[31], i_wb_rdt[31], i_wb_rdt[31], i_wb_rdt[31], i_wb_rdt[31], i_wb_rdt[31], i_wb_rdt[31], i_wb_rdt[31] };
  assign _154_ = i_wb_rdt[3] ? (* src = "serv/rtl/serv_decode.v:236" *) i_wb_rdt[20] : i_wb_rdt[31];
  assign _155_ = utype ? (* src = "serv/rtl/serv_decode.v:236" *) 1'h0 : _154_;
  assign _156_ = btype ? (* src = "serv/rtl/serv_decode.v:236" *) i_wb_rdt[7] : _155_;
  assign _157_ = utype ? (* src = "serv/rtl/serv_decode.v:237" *) 6'h00 : i_wb_rdt[30:25];
  assign _158_ = iorjtype ? (* src = "serv/rtl/serv_decode.v:240" *) i_wb_rdt[24:21] : 4'h0;
  assign _159_ = sorbtype ? (* src = "serv/rtl/serv_decode.v:240" *) i_wb_rdt[11:8] : _158_;
  assign _160_ = stype ? (* src = "serv/rtl/serv_decode.v:243" *) i_wb_rdt[7] : 1'h0;
  assign _161_ = itype ? (* src = "serv/rtl/serv_decode.v:243" *) i_wb_rdt[20] : _160_;
  assign o_rf_rs_en = two_stage_op ? (* src = "serv/rtl/serv_decode.v:284" *) o_alu_init : o_ctrl_pc_en;
  assign _070_[3] = 1'h0;
  assign jtype = i_wb_rdt[3];
  assign o_alu_bool_op = o_funct3[1:0];
  assign o_alu_en = cnt_en;
  assign o_alu_sh_right = o_funct3[2];
  assign o_alu_sh_signed = imm30;
  assign o_alu_sub = alu_sub_r;
  assign o_cnt = cnt;
  assign o_cnt_done = cnt_done;
  assign o_csr_d_sel = o_funct3[2];
  assign o_ctrl_en = cnt_en;
  assign o_imm = imm[0];
  assign o_mem_bytecnt = cnt[4:3];
  assign o_mem_cmd = opcode[3];
  assign o_op_b_source = opcode[3];
  assign op_code = i_wb_rdt[6:2];
  assign sign_bit = i_wb_rdt[31];
endmodule

(* src = "serv/rtl/serv_mem_if.v:2" *)
module serv_mem_if(i_clk, i_rst, i_en, i_init, i_cmd, i_bytecnt, i_funct3, i_rs2, o_rd, i_lsb, o_misalign, i_trap, o_wb_dat, o_wb_sel, o_wb_we, o_wb_cyc, i_wb_rdt, i_wb_ack);
  (* src = "serv/rtl/serv_mem_if.v:80" *)
  wire [1:0] _000_;
  (* src = "serv/rtl/serv_mem_if.v:80" *)
  wire [7:0] _001_;
  (* src = "serv/rtl/serv_mem_if.v:80" *)
  wire [7:0] _002_;
  (* src = "serv/rtl/serv_mem_if.v:80" *)
  wire [7:0] _003_;
  (* src = "serv/rtl/serv_mem_if.v:80" *)
  wire [7:0] _004_;
  (* src = "serv/rtl/serv_mem_if.v:80" *)
  wire _005_;
  (* src = "serv/rtl/serv_mem_if.v:80" *)
  wire _006_;
  (* src = "serv/rtl/serv_mem_if.v:80" *)
  wire _007_;
  (* src = "serv/rtl/serv_mem_if.v:80" *)
  wire _008_;
  (* src = "serv/rtl/serv_mem_if.v:103" *)
  wire _009_;
  (* src = "serv/rtl/serv_mem_if.v:103" *)
  wire _010_;
  (* src = "serv/rtl/serv_mem_if.v:43" *)
  wire _011_;
  (* src = "serv/rtl/serv_mem_if.v:45" *)
  wire _012_;
  (* src = "serv/rtl/serv_mem_if.v:57" *)
  wire _013_;
  (* src = "serv/rtl/serv_mem_if.v:59" *)
  wire _014_;
  (* src = "serv/rtl/serv_mem_if.v:96" *)
  wire _015_;
  (* src = "serv/rtl/serv_mem_if.v:96" *)
  wire _016_;
  (* src = "serv/rtl/serv_mem_if.v:38" *)
  wire _017_;
  (* src = "serv/rtl/serv_mem_if.v:39" *)
  wire _018_;
  (* src = "serv/rtl/serv_mem_if.v:40" *)
  wire _019_;
  (* src = "serv/rtl/serv_mem_if.v:57" *)
  wire _020_;
  (* src = "serv/rtl/serv_mem_if.v:58" *)
  wire _021_;
  (* src = "serv/rtl/serv_mem_if.v:59" *)
  wire _022_;
  (* src = "serv/rtl/serv_mem_if.v:67" *)
  wire _023_;
  (* src = "serv/rtl/serv_mem_if.v:68" *)
  wire _024_;
  (* src = "serv/rtl/serv_mem_if.v:69" *)
  wire _025_;
  (* src = "serv/rtl/serv_mem_if.v:71" *)
  wire _026_;
  (* src = "serv/rtl/serv_mem_if.v:103" *)
  wire _027_;
  (* src = "serv/rtl/serv_mem_if.v:103" *)
  wire _028_;
  (* src = "serv/rtl/serv_mem_if.v:45" *)
  wire _029_;
  (* src = "serv/rtl/serv_mem_if.v:59" *)
  wire _030_;
  (* src = "serv/rtl/serv_mem_if.v:67" *)
  wire _031_;
  (* src = "serv/rtl/serv_mem_if.v:96" *)
  wire _032_;
  (* src = "serv/rtl/serv_mem_if.v:45" *)
  wire _033_;
  (* src = "serv/rtl/serv_mem_if.v:57" *)
  wire _034_;
  (* src = "serv/rtl/serv_mem_if.v:59" *)
  wire _035_;
  (* src = "serv/rtl/serv_mem_if.v:72" *)
  wire _036_;
  (* src = "serv/rtl/serv_mem_if.v:73" *)
  wire _037_;
  (* src = "serv/rtl/serv_mem_if.v:74" *)
  wire _038_;
  (* src = "serv/rtl/serv_mem_if.v:78" *)
  wire [1:0] _039_;
  (* src = "serv/rtl/serv_mem_if.v:96" *)
  wire _040_;
  wire [7:0] _041_;
  wire [7:0] _042_;
  wire [7:0] _043_;
  wire [7:0] _044_;
  wire _045_;
  wire _046_;
  (* src = "serv/rtl/serv_mem_if.v:40" *)
  wire _047_;
  (* src = "serv/rtl/serv_mem_if.v:40" *)
  wire _048_;
  (* src = "serv/rtl/serv_mem_if.v:71" *)
  wire _049_;
  (* src = "serv/rtl/serv_mem_if.v:72" *)
  wire _050_;
  (* src = "serv/rtl/serv_mem_if.v:73" *)
  wire _051_;
  (* src = "serv/rtl/serv_mem_if.v:74" *)
  wire _052_;
  (* src = "serv/rtl/serv_mem_if.v:63" *)
  reg [1:0] bytepos;
  (* src = "serv/rtl/serv_mem_if.v:29" *)
  reg [7:0] dat0;
  (* src = "serv/rtl/serv_mem_if.v:33" *)
  wire dat0_en;
  (* src = "serv/rtl/serv_mem_if.v:30" *)
  reg [7:0] dat1;
  (* src = "serv/rtl/serv_mem_if.v:34" *)
  wire dat1_en;
  (* src = "serv/rtl/serv_mem_if.v:31" *)
  reg [7:0] dat2;
  (* src = "serv/rtl/serv_mem_if.v:35" *)
  wire dat2_en;
  (* src = "serv/rtl/serv_mem_if.v:32" *)
  reg [7:0] dat3;
  (* src = "serv/rtl/serv_mem_if.v:36" *)
  wire dat3_en;
  (* src = "serv/rtl/serv_mem_if.v:38" *)
  wire dat_cur;
  (* src = "serv/rtl/serv_mem_if.v:78" *)
  wire [1:0] dat_sel;
  (* src = "serv/rtl/serv_mem_if.v:45" *)
  wire dat_valid;
  (* src = "serv/rtl/serv_mem_if.v:9" *)
  input [1:0] i_bytecnt;
  (* src = "serv/rtl/serv_mem_if.v:4" *)
  input i_clk;
  (* src = "serv/rtl/serv_mem_if.v:8" *)
  input i_cmd;
  (* src = "serv/rtl/serv_mem_if.v:6" *)
  input i_en;
  (* src = "serv/rtl/serv_mem_if.v:10" *)
  input [2:0] i_funct3;
  (* src = "serv/rtl/serv_mem_if.v:7" *)
  input i_init;
  (* src = "serv/rtl/serv_mem_if.v:13" *)
  input [1:0] i_lsb;
  (* src = "serv/rtl/serv_mem_if.v:11" *)
  input i_rs2;
  (* src = "serv/rtl/serv_mem_if.v:5" *)
  input i_rst;
  (* src = "serv/rtl/serv_mem_if.v:15" *)
  input i_trap;
  (* src = "serv/rtl/serv_mem_if.v:22" *)
  input i_wb_ack;
  (* src = "serv/rtl/serv_mem_if.v:21" *)
  input [31:0] i_wb_rdt;
  (* src = "serv/rtl/serv_mem_if.v:25" *)
  reg init_r;
  (* src = "serv/rtl/serv_mem_if.v:48" *)
  wire is_half;
  (* src = "serv/rtl/serv_mem_if.v:42" *)
  wire is_signed;
  (* src = "serv/rtl/serv_mem_if.v:47" *)
  wire is_word;
  (* src = "serv/rtl/serv_mem_if.v:14" *)
  output o_misalign;
  reg o_misalign;
  (* src = "serv/rtl/serv_mem_if.v:12" *)
  output o_rd;
  (* src = "serv/rtl/serv_mem_if.v:20" *)
  output o_wb_cyc;
  reg o_wb_cyc;
  (* src = "serv/rtl/serv_mem_if.v:17" *)
  output [31:0] o_wb_dat;
  (* src = "serv/rtl/serv_mem_if.v:18" *)
  output [3:0] o_wb_sel;
  (* src = "serv/rtl/serv_mem_if.v:19" *)
  output o_wb_we;
  (* init = 1'h0 *)
  (* src = "serv/rtl/serv_mem_if.v:27" *)
  reg signbit = 1'h0;
  (* src = "serv/rtl/serv_mem_if.v:51" *)
  wire upper_half;
  (* src = "serv/rtl/serv_mem_if.v:24" *)
  wire wb_en;
  (* src = "serv/rtl/serv_mem_if.v:66" *)
  wire wbyte0;
  (* src = "serv/rtl/serv_mem_if.v:67" *)
  wire wbyte1;
  (* src = "serv/rtl/serv_mem_if.v:68" *)
  wire wbyte2;
  (* src = "serv/rtl/serv_mem_if.v:69" *)
  wire wbyte3;
  assign _009_ = init_r & (* src = "serv/rtl/serv_mem_if.v:103" *) _027_;
  assign _010_ = _009_ & (* src = "serv/rtl/serv_mem_if.v:103" *) _028_;
  assign wb_en = o_wb_cyc & (* src = "serv/rtl/serv_mem_if.v:24" *) i_wb_ack;
  assign _011_ = signbit & (* src = "serv/rtl/serv_mem_if.v:43" *) is_signed;
  assign _012_ = i_funct3[0] & (* src = "serv/rtl/serv_mem_if.v:45" *) _029_;
  assign _013_ = i_funct3[0] & (* src = "serv/rtl/serv_mem_if.v:57" *) bytepos[1];
  assign _014_ = _035_ & (* src = "serv/rtl/serv_mem_if.v:59" *) _030_;
  assign wbyte1 = _023_ & (* src = "serv/rtl/serv_mem_if.v:67" *) _031_;
  assign wbyte2 = _024_ & (* src = "serv/rtl/serv_mem_if.v:68" *) _030_;
  assign wbyte3 = _025_ & (* src = "serv/rtl/serv_mem_if.v:69" *) _030_;
  assign dat0_en = i_en & (* src = "serv/rtl/serv_mem_if.v:71" *) _049_;
  assign dat1_en = i_en & (* src = "serv/rtl/serv_mem_if.v:72" *) _050_;
  assign dat2_en = i_en & (* src = "serv/rtl/serv_mem_if.v:73" *) _051_;
  assign dat3_en = i_en & (* src = "serv/rtl/serv_mem_if.v:74" *) _052_;
  assign _015_ = bytepos[0] & (* src = "serv/rtl/serv_mem_if.v:96" *) _032_;
  assign _016_ = bytepos[1] & (* src = "serv/rtl/serv_mem_if.v:96" *) i_funct3[1];
  assign _006_ = i_en & (* src = "serv/rtl/serv_mem_if.v:96" *) _040_;
  assign _017_ = dat_sel == (* src = "serv/rtl/serv_mem_if.v:38" *) 2'h3;
  assign _018_ = dat_sel == (* src = "serv/rtl/serv_mem_if.v:39" *) 2'h2;
  assign _019_ = dat_sel == (* src = "serv/rtl/serv_mem_if.v:40" *) 1'h1;
  assign wbyte0 = ! (* src = "serv/rtl/serv_mem_if.v:45" *) i_bytecnt;
  assign _020_ = bytepos == (* src = "serv/rtl/serv_mem_if.v:57" *) 2'h3;
  assign _021_ = bytepos == (* src = "serv/rtl/serv_mem_if.v:58" *) 2'h2;
  assign _022_ = bytepos == (* src = "serv/rtl/serv_mem_if.v:59" *) 1'h1;
  assign o_wb_sel[0] = ! (* src = "serv/rtl/serv_mem_if.v:60" *) bytepos;
  assign _023_ = i_bytecnt == (* src = "serv/rtl/serv_mem_if.v:67" *) 1'h1;
  assign _024_ = i_bytecnt == (* src = "serv/rtl/serv_mem_if.v:68" *) 2'h2;
  assign _025_ = i_bytecnt == (* src = "serv/rtl/serv_mem_if.v:69" *) 2'h3;
  assign _026_ = ! (* src = "serv/rtl/serv_mem_if.v:71" *) dat_sel;
  assign _027_ = ! (* src = "serv/rtl/serv_mem_if.v:103" *) i_init;
  assign _028_ = ! (* src = "serv/rtl/serv_mem_if.v:103" *) i_trap;
  assign _029_ = ! (* src = "serv/rtl/serv_mem_if.v:45" *) i_bytecnt[1];
  assign _030_ = ! (* src = "serv/rtl/serv_mem_if.v:59" *) bytepos[1];
  assign _031_ = ! (* src = "serv/rtl/serv_mem_if.v:67" *) bytepos[0];
  assign is_signed = ~ (* src = "serv/rtl/serv_mem_if.v:42" *) i_funct3[2];
  assign _033_ = i_funct3[1] | (* src = "serv/rtl/serv_mem_if.v:45" *) wbyte0;
  assign dat_valid = _033_ | (* src = "serv/rtl/serv_mem_if.v:45" *) _012_;
  assign _034_ = i_funct3[1] | (* src = "serv/rtl/serv_mem_if.v:57" *) _013_;
  assign o_wb_sel[3] = _034_ | (* src = "serv/rtl/serv_mem_if.v:57" *) _020_;
  assign o_wb_sel[2] = _021_ | (* src = "serv/rtl/serv_mem_if.v:58" *) i_funct3[1];
  assign _035_ = i_funct3[1] | (* src = "serv/rtl/serv_mem_if.v:59" *) i_funct3[0];
  assign o_wb_sel[1] = _014_ | (* src = "serv/rtl/serv_mem_if.v:59" *) _022_;
  assign _036_ = wbyte0 | (* src = "serv/rtl/serv_mem_if.v:72" *) wbyte1;
  assign _037_ = wbyte0 | (* src = "serv/rtl/serv_mem_if.v:73" *) wbyte2;
  assign _038_ = _036_ | (* src = "serv/rtl/serv_mem_if.v:74" *) wbyte3;
  assign _039_ = i_bytecnt | (* src = "serv/rtl/serv_mem_if.v:78" *) bytepos;
  assign _040_ = _015_ | (* src = "serv/rtl/serv_mem_if.v:96" *) _016_;
  always @(posedge i_clk)
      o_misalign <= _006_;
  always @(posedge i_clk)
      o_wb_cyc <= _007_;
  always @(posedge i_clk)
      init_r <= _005_;
  always @(posedge i_clk)
      signbit <= _008_;
  always @(posedge i_clk)
      dat0 <= _001_;
  always @(posedge i_clk)
      dat1 <= _002_;
  always @(posedge i_clk)
      dat2 <= _003_;
  always @(posedge i_clk)
      dat3 <= _004_;
  always @(posedge i_clk)
      bytepos <= _000_;
  assign _041_ = dat3_en ? (* src = "serv/rtl/serv_mem_if.v:90" *) { i_rs2, dat3[7:1] } : dat3;
  assign _004_ = wb_en ? (* src = "serv/rtl/serv_mem_if.v:93" *) i_wb_rdt[31:24] : _041_;
  assign _000_ = i_init ? (* src = "serv/rtl/serv_mem_if.v:81" *) i_lsb : bytepos;
  assign _042_ = dat2_en ? (* src = "serv/rtl/serv_mem_if.v:88" *) { i_rs2, dat2[7:1] } : dat2;
  assign _003_ = wb_en ? (* src = "serv/rtl/serv_mem_if.v:93" *) i_wb_rdt[23:16] : _042_;
  assign _043_ = dat1_en ? (* src = "serv/rtl/serv_mem_if.v:86" *) { i_rs2, dat1[7:1] } : dat1;
  assign _002_ = wb_en ? (* src = "serv/rtl/serv_mem_if.v:93" *) i_wb_rdt[15:8] : _043_;
  assign _044_ = dat0_en ? (* src = "serv/rtl/serv_mem_if.v:84" *) { i_rs2, dat0[7:1] } : dat0;
  assign _001_ = wb_en ? (* src = "serv/rtl/serv_mem_if.v:93" *) i_wb_rdt[7:0] : _044_;
  assign _005_ = i_rst ? (* src = "serv/rtl/serv_mem_if.v:106" *) 1'h0 : i_init;
  assign _008_ = dat_valid ? (* src = "serv/rtl/serv_mem_if.v:97" *) dat_cur : signbit;
  assign _045_ = _010_ ? (* src = "serv/rtl/serv_mem_if.v:103" *) 1'h1 : o_wb_cyc;
  assign _046_ = wb_en ? (* full_case = 32'd1 *) (* src = "serv/rtl/serv_mem_if.v:101" *) 1'h0 : _045_;
  assign _007_ = i_rst ? (* src = "serv/rtl/serv_mem_if.v:106" *) 1'h0 : _046_;
  assign _032_ = | (* src = "serv/rtl/serv_mem_if.v:49" *) { i_funct3[0], i_funct3[1] };
  assign _047_ = _019_ ? (* src = "serv/rtl/serv_mem_if.v:40" *) dat1[0] : dat0[0];
  assign _048_ = _018_ ? (* src = "serv/rtl/serv_mem_if.v:40" *) dat2[0] : _047_;
  assign dat_cur = _017_ ? (* src = "serv/rtl/serv_mem_if.v:40" *) dat3[0] : _048_;
  assign o_rd = dat_valid ? (* src = "serv/rtl/serv_mem_if.v:43" *) dat_cur : _011_;
  assign _049_ = i_init ? (* src = "serv/rtl/serv_mem_if.v:71" *) wbyte0 : _026_;
  assign _050_ = i_init ? (* src = "serv/rtl/serv_mem_if.v:72" *) _036_ : _019_;
  assign _051_ = i_init ? (* src = "serv/rtl/serv_mem_if.v:73" *) _037_ : _018_;
  assign _052_ = i_init ? (* src = "serv/rtl/serv_mem_if.v:74" *) _038_ : _017_;
  assign dat_sel = i_bytecnt[1] ? (* src = "serv/rtl/serv_mem_if.v:78" *) { 1'h1, i_bytecnt[0] } : _039_;
  assign is_half = i_funct3[0];
  assign is_word = i_funct3[1];
  assign o_wb_dat = { dat3, dat2, dat1, dat0 };
  assign o_wb_we = i_cmd;
  assign upper_half = bytepos[1];
endmodule

(* src = "serv/rtl/serv_regfile.v:2" *)
module serv_regfile(i_clk, i_rst, i_go, o_ready, i_rd_en, i_rd_addr, i_rd, i_rs1_addr, i_rs2_addr, o_rs1, o_rs2);
  (* src = "serv/rtl/serv_regfile.v:70" *)
  wire [8:0] _00_;
  (* src = "serv/rtl/serv_regfile.v:70" *)
  wire [1:0] _01_;
  (* src = "serv/rtl/serv_regfile.v:70" *)
  wire [1:0] _02_;
  (* src = "serv/rtl/serv_regfile.v:17" *)
  wire _03_;
  (* src = "serv/rtl/serv_regfile.v:39" *)
  wire [4:0] _04_;
  (* src = "serv/rtl/serv_regfile.v:70" *)
  wire [1:0] _05_;
  (* src = "serv/rtl/serv_regfile.v:39" *)
  wire _06_;
  (* src = "serv/rtl/serv_regfile.v:39" *)
  wire _07_;
  (* src = "serv/rtl/serv_regfile.v:17" *)
  wire _08_;
  (* src = "serv/rtl/serv_regfile.v:39" *)
  wire [4:0] _09_;
  (* src = "serv/rtl/serv_regfile.v:42" *)
  wire [4:0] _10_;
  (* src = "serv/rtl/serv_regfile.v:47" *)
  wire [4:0] _11_;
  (* src = "serv/rtl/serv_regfile.v:64" *)
  wire _12_;
  wire [4:0] _13_;
  (* src = "serv/rtl/serv_regfile.v:64" *)
  wire _14_;
  (* src = "serv/rtl/serv_regfile.v:77" *)
  wire [31:0] i;
  (* src = "serv/rtl/serv_regfile.v:4" *)
  input i_clk;
  (* src = "serv/rtl/serv_regfile.v:6" *)
  input i_go;
  (* src = "serv/rtl/serv_regfile.v:10" *)
  input i_rd;
  (* src = "serv/rtl/serv_regfile.v:9" *)
  input [4:0] i_rd_addr;
  (* src = "serv/rtl/serv_regfile.v:8" *)
  input i_rd_en;
  (* src = "serv/rtl/serv_regfile.v:11" *)
  input [4:0] i_rs1_addr;
  (* src = "serv/rtl/serv_regfile.v:12" *)
  input [4:0] i_rs2_addr;
  (* src = "serv/rtl/serv_regfile.v:5" *)
  input i_rst;
  (* src = "serv/rtl/serv_regfile.v:7" *)
  output o_ready;
  reg o_ready;
  (* src = "serv/rtl/serv_regfile.v:13" *)
  output o_rs1;
  (* src = "serv/rtl/serv_regfile.v:14" *)
  output o_rs2;
  (* src = "serv/rtl/serv_regfile.v:66" *)
  wire [8:0] raddr;
  (* src = "serv/rtl/serv_regfile.v:29" *)
  reg [4:0] rcnt;
  (* src = "serv/rtl/serv_regfile.v:26" *)
  reg rd_r;
  (* src = "serv/rtl/serv_regfile.v:28" *)
  reg [1:0] rdata;
  (* src = "serv/rtl/serv_regfile.v:31" *)
  reg rs1;
  (* src = "serv/rtl/serv_regfile.v:35" *)
  wire rs1_en;
  (* src = "serv/rtl/serv_regfile.v:33" *)
  reg rs1_r;
  (* src = "serv/rtl/serv_regfile.v:36" *)
  wire rs1_tmp;
  (* src = "serv/rtl/serv_regfile.v:32" *)
  reg rs2;
  (* src = "serv/rtl/serv_regfile.v:16" *)
  reg t;
  (* src = "serv/rtl/serv_regfile.v:63" *)
  wire [8:0] waddr;
  (* src = "serv/rtl/serv_regfile.v:30" *)
  reg [4:0] wcnt;
  (* src = "serv/rtl/serv_regfile.v:38" *)
  wire [1:0] wdata;
  (* src = "serv/rtl/serv_regfile.v:64" *)
  wire wr_en;
  assign _10_ = wcnt + (* src = "serv/rtl/serv_regfile.v:42" *) 1'h1;
  assign _11_ = rcnt + (* src = "serv/rtl/serv_regfile.v:47" *) 1'h1;
  assign _12_ = wcnt[0] & (* src = "serv/rtl/serv_regfile.v:64" *) i_rd_en;
  assign wr_en = _12_ & (* src = "serv/rtl/serv_regfile.v:64" *) _14_;
  always @(posedge i_clk)
      rdata <= _05_;
  always @(posedge i_clk)
      rs1 <= _06_;
  always @(posedge i_clk)
      rs2 <= _07_;
  always @(posedge i_clk)
      rd_r <= i_rd;
  always @(posedge i_clk)
      rcnt <= _04_;
  always @(posedge i_clk)
      wcnt <= _09_;
  always @(posedge i_clk)
      rs1_r <= rs1_tmp;
  always @(posedge i_clk)
      o_ready <= _03_;
  always @(posedge i_clk)
      t <= _08_;
  assign _02_[1] = wr_en ? (* src = "serv/rtl/serv_regfile.v:71" *) 1'h1 : 1'h0;
  assign _01_ = wr_en ? (* src = "serv/rtl/serv_regfile.v:71" *) { i_rd, rd_r } : 2'hx;
  assign _00_ = wr_en ? (* src = "serv/rtl/serv_regfile.v:71" *) { i_rd_addr, wcnt[4:1] } : 9'hxxx;
  assign _04_ = i_go ? (* full_case = 32'd1 *) (* src = "serv/rtl/serv_regfile.v:44" *) 5'h00 : _11_;
  assign _13_ = i_rd_en ? (* src = "serv/rtl/serv_regfile.v:41" *) _10_ : wcnt;
  assign _09_ = i_rst ? (* src = "serv/rtl/serv_regfile.v:54" *) 5'h00 : _13_;
  assign _07_ = rcnt[0] ? (* full_case = 32'd1 *) (* src = "serv/rtl/serv_regfile.v:48" *) rs2 : rdata[1];
  assign _06_ = rcnt[0] ? (* full_case = 32'd1 *) (* src = "serv/rtl/serv_regfile.v:48" *) rdata[1] : rs1;
  assign _08_ = i_rst ? (* src = "serv/rtl/serv_regfile.v:20" *) 1'h0 : i_go;
  assign _03_ = i_rst ? (* src = "serv/rtl/serv_regfile.v:20" *) 1'h0 : t;
  assign _14_ = | (* src = "serv/rtl/serv_regfile.v:64" *) { i_rd_addr[0], i_rd_addr[1], i_rd_addr[2], i_rd_addr[3], i_rd_addr[4] };
  assign rs1_tmp = rcnt[0] ? (* src = "serv/rtl/serv_regfile.v:36" *) rdata[0] : rs1;
  assign o_rs2 = rcnt[0] ? (* src = "serv/rtl/serv_regfile.v:61" *) rs2 : rdata[0];
  assign raddr[8:4] = rcnt[0] ? (* src = "serv/rtl/serv_regfile.v:66" *) i_rs2_addr : i_rs1_addr;
  reg [1:0] memory [511:0];
  initial begin
    memory[0] = 2'h0;
    memory[1] = 2'h0;
    memory[2] = 2'h0;
    memory[3] = 2'h0;
    memory[4] = 2'h0;
    memory[5] = 2'h0;
    memory[6] = 2'h0;
    memory[7] = 2'h0;
    memory[8] = 2'h0;
    memory[9] = 2'h0;
    memory[10] = 2'h0;
    memory[11] = 2'h0;
    memory[12] = 2'h0;
    memory[13] = 2'h0;
    memory[14] = 2'h0;
    memory[15] = 2'h0;
    memory[16] = 2'h0;
    memory[17] = 2'h0;
    memory[18] = 2'h0;
    memory[19] = 2'h0;
    memory[20] = 2'h0;
    memory[21] = 2'h0;
    memory[22] = 2'h0;
    memory[23] = 2'h0;
    memory[24] = 2'h0;
    memory[25] = 2'h0;
    memory[26] = 2'h0;
    memory[27] = 2'h0;
    memory[28] = 2'h0;
    memory[29] = 2'h0;
    memory[30] = 2'h0;
    memory[31] = 2'h0;
    memory[32] = 2'h0;
    memory[33] = 2'h0;
    memory[34] = 2'h0;
    memory[35] = 2'h0;
    memory[36] = 2'h0;
    memory[37] = 2'h0;
    memory[38] = 2'h0;
    memory[39] = 2'h0;
    memory[40] = 2'h0;
    memory[41] = 2'h0;
    memory[42] = 2'h0;
    memory[43] = 2'h0;
    memory[44] = 2'h0;
    memory[45] = 2'h0;
    memory[46] = 2'h0;
    memory[47] = 2'h0;
    memory[48] = 2'h0;
    memory[49] = 2'h0;
    memory[50] = 2'h0;
    memory[51] = 2'h0;
    memory[52] = 2'h0;
    memory[53] = 2'h0;
    memory[54] = 2'h0;
    memory[55] = 2'h0;
    memory[56] = 2'h0;
    memory[57] = 2'h0;
    memory[58] = 2'h0;
    memory[59] = 2'h0;
    memory[60] = 2'h0;
    memory[61] = 2'h0;
    memory[62] = 2'h0;
    memory[63] = 2'h0;
    memory[64] = 2'h0;
    memory[65] = 2'h0;
    memory[66] = 2'h0;
    memory[67] = 2'h0;
    memory[68] = 2'h0;
    memory[69] = 2'h0;
    memory[70] = 2'h0;
    memory[71] = 2'h0;
    memory[72] = 2'h0;
    memory[73] = 2'h0;
    memory[74] = 2'h0;
    memory[75] = 2'h0;
    memory[76] = 2'h0;
    memory[77] = 2'h0;
    memory[78] = 2'h0;
    memory[79] = 2'h0;
    memory[80] = 2'h0;
    memory[81] = 2'h0;
    memory[82] = 2'h0;
    memory[83] = 2'h0;
    memory[84] = 2'h0;
    memory[85] = 2'h0;
    memory[86] = 2'h0;
    memory[87] = 2'h0;
    memory[88] = 2'h0;
    memory[89] = 2'h0;
    memory[90] = 2'h0;
    memory[91] = 2'h0;
    memory[92] = 2'h0;
    memory[93] = 2'h0;
    memory[94] = 2'h0;
    memory[95] = 2'h0;
    memory[96] = 2'h0;
    memory[97] = 2'h0;
    memory[98] = 2'h0;
    memory[99] = 2'h0;
    memory[100] = 2'h0;
    memory[101] = 2'h0;
    memory[102] = 2'h0;
    memory[103] = 2'h0;
    memory[104] = 2'h0;
    memory[105] = 2'h0;
    memory[106] = 2'h0;
    memory[107] = 2'h0;
    memory[108] = 2'h0;
    memory[109] = 2'h0;
    memory[110] = 2'h0;
    memory[111] = 2'h0;
    memory[112] = 2'h0;
    memory[113] = 2'h0;
    memory[114] = 2'h0;
    memory[115] = 2'h0;
    memory[116] = 2'h0;
    memory[117] = 2'h0;
    memory[118] = 2'h0;
    memory[119] = 2'h0;
    memory[120] = 2'h0;
    memory[121] = 2'h0;
    memory[122] = 2'h0;
    memory[123] = 2'h0;
    memory[124] = 2'h0;
    memory[125] = 2'h0;
    memory[126] = 2'h0;
    memory[127] = 2'h0;
    memory[128] = 2'h0;
    memory[129] = 2'h0;
    memory[130] = 2'h0;
    memory[131] = 2'h0;
    memory[132] = 2'h0;
    memory[133] = 2'h0;
    memory[134] = 2'h0;
    memory[135] = 2'h0;
    memory[136] = 2'h0;
    memory[137] = 2'h0;
    memory[138] = 2'h0;
    memory[139] = 2'h0;
    memory[140] = 2'h0;
    memory[141] = 2'h0;
    memory[142] = 2'h0;
    memory[143] = 2'h0;
    memory[144] = 2'h0;
    memory[145] = 2'h0;
    memory[146] = 2'h0;
    memory[147] = 2'h0;
    memory[148] = 2'h0;
    memory[149] = 2'h0;
    memory[150] = 2'h0;
    memory[151] = 2'h0;
    memory[152] = 2'h0;
    memory[153] = 2'h0;
    memory[154] = 2'h0;
    memory[155] = 2'h0;
    memory[156] = 2'h0;
    memory[157] = 2'h0;
    memory[158] = 2'h0;
    memory[159] = 2'h0;
    memory[160] = 2'h0;
    memory[161] = 2'h0;
    memory[162] = 2'h0;
    memory[163] = 2'h0;
    memory[164] = 2'h0;
    memory[165] = 2'h0;
    memory[166] = 2'h0;
    memory[167] = 2'h0;
    memory[168] = 2'h0;
    memory[169] = 2'h0;
    memory[170] = 2'h0;
    memory[171] = 2'h0;
    memory[172] = 2'h0;
    memory[173] = 2'h0;
    memory[174] = 2'h0;
    memory[175] = 2'h0;
    memory[176] = 2'h0;
    memory[177] = 2'h0;
    memory[178] = 2'h0;
    memory[179] = 2'h0;
    memory[180] = 2'h0;
    memory[181] = 2'h0;
    memory[182] = 2'h0;
    memory[183] = 2'h0;
    memory[184] = 2'h0;
    memory[185] = 2'h0;
    memory[186] = 2'h0;
    memory[187] = 2'h0;
    memory[188] = 2'h0;
    memory[189] = 2'h0;
    memory[190] = 2'h0;
    memory[191] = 2'h0;
    memory[192] = 2'h0;
    memory[193] = 2'h0;
    memory[194] = 2'h0;
    memory[195] = 2'h0;
    memory[196] = 2'h0;
    memory[197] = 2'h0;
    memory[198] = 2'h0;
    memory[199] = 2'h0;
    memory[200] = 2'h0;
    memory[201] = 2'h0;
    memory[202] = 2'h0;
    memory[203] = 2'h0;
    memory[204] = 2'h0;
    memory[205] = 2'h0;
    memory[206] = 2'h0;
    memory[207] = 2'h0;
    memory[208] = 2'h0;
    memory[209] = 2'h0;
    memory[210] = 2'h0;
    memory[211] = 2'h0;
    memory[212] = 2'h0;
    memory[213] = 2'h0;
    memory[214] = 2'h0;
    memory[215] = 2'h0;
    memory[216] = 2'h0;
    memory[217] = 2'h0;
    memory[218] = 2'h0;
    memory[219] = 2'h0;
    memory[220] = 2'h0;
    memory[221] = 2'h0;
    memory[222] = 2'h0;
    memory[223] = 2'h0;
    memory[224] = 2'h0;
    memory[225] = 2'h0;
    memory[226] = 2'h0;
    memory[227] = 2'h0;
    memory[228] = 2'h0;
    memory[229] = 2'h0;
    memory[230] = 2'h0;
    memory[231] = 2'h0;
    memory[232] = 2'h0;
    memory[233] = 2'h0;
    memory[234] = 2'h0;
    memory[235] = 2'h0;
    memory[236] = 2'h0;
    memory[237] = 2'h0;
    memory[238] = 2'h0;
    memory[239] = 2'h0;
    memory[240] = 2'h0;
    memory[241] = 2'h0;
    memory[242] = 2'h0;
    memory[243] = 2'h0;
    memory[244] = 2'h0;
    memory[245] = 2'h0;
    memory[246] = 2'h0;
    memory[247] = 2'h0;
    memory[248] = 2'h0;
    memory[249] = 2'h0;
    memory[250] = 2'h0;
    memory[251] = 2'h0;
    memory[252] = 2'h0;
    memory[253] = 2'h0;
    memory[254] = 2'h0;
    memory[255] = 2'h0;
    memory[256] = 2'h0;
    memory[257] = 2'h0;
    memory[258] = 2'h0;
    memory[259] = 2'h0;
    memory[260] = 2'h0;
    memory[261] = 2'h0;
    memory[262] = 2'h0;
    memory[263] = 2'h0;
    memory[264] = 2'h0;
    memory[265] = 2'h0;
    memory[266] = 2'h0;
    memory[267] = 2'h0;
    memory[268] = 2'h0;
    memory[269] = 2'h0;
    memory[270] = 2'h0;
    memory[271] = 2'h0;
    memory[272] = 2'h0;
    memory[273] = 2'h0;
    memory[274] = 2'h0;
    memory[275] = 2'h0;
    memory[276] = 2'h0;
    memory[277] = 2'h0;
    memory[278] = 2'h0;
    memory[279] = 2'h0;
    memory[280] = 2'h0;
    memory[281] = 2'h0;
    memory[282] = 2'h0;
    memory[283] = 2'h0;
    memory[284] = 2'h0;
    memory[285] = 2'h0;
    memory[286] = 2'h0;
    memory[287] = 2'h0;
    memory[288] = 2'h0;
    memory[289] = 2'h0;
    memory[290] = 2'h0;
    memory[291] = 2'h0;
    memory[292] = 2'h0;
    memory[293] = 2'h0;
    memory[294] = 2'h0;
    memory[295] = 2'h0;
    memory[296] = 2'h0;
    memory[297] = 2'h0;
    memory[298] = 2'h0;
    memory[299] = 2'h0;
    memory[300] = 2'h0;
    memory[301] = 2'h0;
    memory[302] = 2'h0;
    memory[303] = 2'h0;
    memory[304] = 2'h0;
    memory[305] = 2'h0;
    memory[306] = 2'h0;
    memory[307] = 2'h0;
    memory[308] = 2'h0;
    memory[309] = 2'h0;
    memory[310] = 2'h0;
    memory[311] = 2'h0;
    memory[312] = 2'h0;
    memory[313] = 2'h0;
    memory[314] = 2'h0;
    memory[315] = 2'h0;
    memory[316] = 2'h0;
    memory[317] = 2'h0;
    memory[318] = 2'h0;
    memory[319] = 2'h0;
    memory[320] = 2'h0;
    memory[321] = 2'h0;
    memory[322] = 2'h0;
    memory[323] = 2'h0;
    memory[324] = 2'h0;
    memory[325] = 2'h0;
    memory[326] = 2'h0;
    memory[327] = 2'h0;
    memory[328] = 2'h0;
    memory[329] = 2'h0;
    memory[330] = 2'h0;
    memory[331] = 2'h0;
    memory[332] = 2'h0;
    memory[333] = 2'h0;
    memory[334] = 2'h0;
    memory[335] = 2'h0;
    memory[336] = 2'h0;
    memory[337] = 2'h0;
    memory[338] = 2'h0;
    memory[339] = 2'h0;
    memory[340] = 2'h0;
    memory[341] = 2'h0;
    memory[342] = 2'h0;
    memory[343] = 2'h0;
    memory[344] = 2'h0;
    memory[345] = 2'h0;
    memory[346] = 2'h0;
    memory[347] = 2'h0;
    memory[348] = 2'h0;
    memory[349] = 2'h0;
    memory[350] = 2'h0;
    memory[351] = 2'h0;
    memory[352] = 2'h0;
    memory[353] = 2'h0;
    memory[354] = 2'h0;
    memory[355] = 2'h0;
    memory[356] = 2'h0;
    memory[357] = 2'h0;
    memory[358] = 2'h0;
    memory[359] = 2'h0;
    memory[360] = 2'h0;
    memory[361] = 2'h0;
    memory[362] = 2'h0;
    memory[363] = 2'h0;
    memory[364] = 2'h0;
    memory[365] = 2'h0;
    memory[366] = 2'h0;
    memory[367] = 2'h0;
    memory[368] = 2'h0;
    memory[369] = 2'h0;
    memory[370] = 2'h0;
    memory[371] = 2'h0;
    memory[372] = 2'h0;
    memory[373] = 2'h0;
    memory[374] = 2'h0;
    memory[375] = 2'h0;
    memory[376] = 2'h0;
    memory[377] = 2'h0;
    memory[378] = 2'h0;
    memory[379] = 2'h0;
    memory[380] = 2'h0;
    memory[381] = 2'h0;
    memory[382] = 2'h0;
    memory[383] = 2'h0;
    memory[384] = 2'h0;
    memory[385] = 2'h0;
    memory[386] = 2'h0;
    memory[387] = 2'h0;
    memory[388] = 2'h0;
    memory[389] = 2'h0;
    memory[390] = 2'h0;
    memory[391] = 2'h0;
    memory[392] = 2'h0;
    memory[393] = 2'h0;
    memory[394] = 2'h0;
    memory[395] = 2'h0;
    memory[396] = 2'h0;
    memory[397] = 2'h0;
    memory[398] = 2'h0;
    memory[399] = 2'h0;
    memory[400] = 2'h0;
    memory[401] = 2'h0;
    memory[402] = 2'h0;
    memory[403] = 2'h0;
    memory[404] = 2'h0;
    memory[405] = 2'h0;
    memory[406] = 2'h0;
    memory[407] = 2'h0;
    memory[408] = 2'h0;
    memory[409] = 2'h0;
    memory[410] = 2'h0;
    memory[411] = 2'h0;
    memory[412] = 2'h0;
    memory[413] = 2'h0;
    memory[414] = 2'h0;
    memory[415] = 2'h0;
    memory[416] = 2'h0;
    memory[417] = 2'h0;
    memory[418] = 2'h0;
    memory[419] = 2'h0;
    memory[420] = 2'h0;
    memory[421] = 2'h0;
    memory[422] = 2'h0;
    memory[423] = 2'h0;
    memory[424] = 2'h0;
    memory[425] = 2'h0;
    memory[426] = 2'h0;
    memory[427] = 2'h0;
    memory[428] = 2'h0;
    memory[429] = 2'h0;
    memory[430] = 2'h0;
    memory[431] = 2'h0;
    memory[432] = 2'h0;
    memory[433] = 2'h0;
    memory[434] = 2'h0;
    memory[435] = 2'h0;
    memory[436] = 2'h0;
    memory[437] = 2'h0;
    memory[438] = 2'h0;
    memory[439] = 2'h0;
    memory[440] = 2'h0;
    memory[441] = 2'h0;
    memory[442] = 2'h0;
    memory[443] = 2'h0;
    memory[444] = 2'h0;
    memory[445] = 2'h0;
    memory[446] = 2'h0;
    memory[447] = 2'h0;
    memory[448] = 2'h0;
    memory[449] = 2'h0;
    memory[450] = 2'h0;
    memory[451] = 2'h0;
    memory[452] = 2'h0;
    memory[453] = 2'h0;
    memory[454] = 2'h0;
    memory[455] = 2'h0;
    memory[456] = 2'h0;
    memory[457] = 2'h0;
    memory[458] = 2'h0;
    memory[459] = 2'h0;
    memory[460] = 2'h0;
    memory[461] = 2'h0;
    memory[462] = 2'h0;
    memory[463] = 2'h0;
    memory[464] = 2'h0;
    memory[465] = 2'h0;
    memory[466] = 2'h0;
    memory[467] = 2'h0;
    memory[468] = 2'h0;
    memory[469] = 2'h0;
    memory[470] = 2'h0;
    memory[471] = 2'h0;
    memory[472] = 2'h0;
    memory[473] = 2'h0;
    memory[474] = 2'h0;
    memory[475] = 2'h0;
    memory[476] = 2'h0;
    memory[477] = 2'h0;
    memory[478] = 2'h0;
    memory[479] = 2'h0;
    memory[480] = 2'h0;
    memory[481] = 2'h0;
    memory[482] = 2'h0;
    memory[483] = 2'h0;
    memory[484] = 2'h0;
    memory[485] = 2'h0;
    memory[486] = 2'h0;
    memory[487] = 2'h0;
    memory[488] = 2'h0;
    memory[489] = 2'h0;
    memory[490] = 2'h0;
    memory[491] = 2'h0;
    memory[492] = 2'h0;
    memory[493] = 2'h0;
    memory[494] = 2'h0;
    memory[495] = 2'h0;
    memory[496] = 2'h0;
    memory[497] = 2'h0;
    memory[498] = 2'h0;
    memory[499] = 2'h0;
    memory[500] = 2'h0;
    memory[501] = 2'h0;
    memory[502] = 2'h0;
    memory[503] = 2'h0;
    memory[504] = 2'h0;
    memory[505] = 2'h0;
    memory[506] = 2'h0;
    memory[507] = 2'h0;
    memory[508] = 2'h0;
    memory[509] = 2'h0;
    memory[510] = 2'h0;
    memory[511] = 2'h0;
  end
  always @(posedge i_clk) begin
    if (_02_[1]) memory[_00_] <= _01_;
  end
  assign _05_ = memory[{ raddr[8:4], rcnt[4:1] }];
  assign _02_[0] = _02_[1];
  assign i = 32'd512;
  assign o_rs1 = rs1_r;
  assign raddr[3:0] = rcnt[4:1];
  assign rs1_en = rcnt[0];
  assign waddr = { i_rd_addr, wcnt[4:1] };
  assign wdata = { i_rd, rd_r };
endmodule

(* top =  1  *)
(* src = "serv/rtl/serv_top.v:9" *)
module serv_top(clk, i_rst, i_timer_irq, o_ibus_adr, o_ibus_cyc, i_ibus_rdt, i_ibus_ack, o_dbus_adr, o_dbus_dat, o_dbus_sel, o_dbus_we, o_dbus_cyc, i_dbus_rdt, i_dbus_ack);
  (* src = "serv/rtl/serv_top.v:144" *)
  wire _00_;
  (* src = "serv/rtl/serv_top.v:252" *)
  wire _01_;
  (* src = "serv/rtl/serv_top.v:254" *)
  wire _02_;
  (* src = "serv/rtl/serv_top.v:213" *)
  wire _03_;
  (* src = "serv/rtl/serv_top.v:214" *)
  wire _04_;
  (* src = "serv/rtl/serv_top.v:145" *)
  wire _05_;
  (* src = "serv/rtl/serv_top.v:213" *)
  wire _06_;
  (* src = "serv/rtl/serv_top.v:242" *)
  wire _07_;
  (* src = "serv/rtl/serv_top.v:252" *)
  wire _08_;
  (* src = "serv/rtl/serv_top.v:253" *)
  wire _09_;
  (* src = "serv/rtl/serv_top.v:335" *)
  wire _10_;
  (* src = "serv/rtl/serv_top.v:337" *)
  wire _11_;
  (* src = "serv/rtl/serv_top.v:86" *)
  wire [1:0] alu_bool_op;
  (* src = "serv/rtl/serv_top.v:90" *)
  wire alu_cmp;
  (* src = "serv/rtl/serv_top.v:88" *)
  wire alu_cmp_neg;
  (* src = "serv/rtl/serv_top.v:87" *)
  wire alu_cmp_sel;
  (* src = "serv/rtl/serv_top.v:89" *)
  wire alu_cmp_uns;
  (* src = "serv/rtl/serv_top.v:83" *)
  wire alu_en;
  (* src = "serv/rtl/serv_top.v:84" *)
  wire alu_init;
  (* src = "serv/rtl/serv_top.v:57" *)
  wire alu_rd;
  (* src = "serv/rtl/serv_top.v:95" *)
  wire [1:0] alu_rd_sel;
  (* src = "serv/rtl/serv_top.v:94" *)
  wire alu_sh_done;
  (* src = "serv/rtl/serv_top.v:93" *)
  wire alu_sh_right;
  (* src = "serv/rtl/serv_top.v:92" *)
  wire alu_sh_signed;
  (* src = "serv/rtl/serv_top.v:91" *)
  wire alu_shamt_en;
  (* src = "serv/rtl/serv_top.v:85" *)
  wire alu_sub;
  (* src = "serv/rtl/serv_top.v:115" *)
  wire bad_adr;
  (* src = "serv/rtl/serv_top.v:114" *)
  wire bad_pc;
  (* src = "serv/rtl/serv_top.v:79" *)
  wire bufreg_hold;
  (* src = "serv/rtl/serv_top.v:80" *)
  wire bufreg_imm_en;
  (* src = "serv/rtl/serv_top.v:81" *)
  wire bufreg_loop;
  (* src = "serv/rtl/serv_top.v:204" *)
  (* unused_bits = "0 1" *)
  wire [31:0] bufreg_out;
  (* src = "serv/rtl/serv_top.v:11" *)
  input clk;
  (* src = "serv/rtl/serv_top.v:73" *)
  wire [4:0] cnt;
  (* src = "serv/rtl/serv_top.v:76" *)
  wire cnt_done;
  (* src = "serv/rtl/serv_top.v:74" *)
  wire [3:0] cnt_r;
  (* src = "serv/rtl/serv_top.v:127" *)
  wire csr_d_sel;
  (* src = "serv/rtl/serv_top.v:126" *)
  wire csr_imm;
  (* src = "serv/rtl/serv_top.v:123" *)
  wire csr_mcause_en;
  (* src = "serv/rtl/serv_top.v:122" *)
  wire csr_mepc_en;
  (* src = "serv/rtl/serv_top.v:118" *)
  wire csr_mie_en;
  (* src = "serv/rtl/serv_top.v:120" *)
  wire csr_mip_en;
  (* src = "serv/rtl/serv_top.v:121" *)
  wire csr_mscratch_en;
  (* src = "serv/rtl/serv_top.v:117" *)
  wire csr_mstatus_en;
  (* src = "serv/rtl/serv_top.v:124" *)
  wire csr_mtval_en;
  (* src = "serv/rtl/serv_top.v:119" *)
  wire csr_mtvec_en;
  (* src = "serv/rtl/serv_top.v:59" *)
  wire csr_rd;
  (* src = "serv/rtl/serv_top.v:125" *)
  wire [1:0] csr_source;
  (* src = "serv/rtl/serv_top.v:62" *)
  wire ctrl_en;
  (* src = "serv/rtl/serv_top.v:64" *)
  wire ctrl_misalign;
  (* src = "serv/rtl/serv_top.v:63" *)
  wire ctrl_pc_en;
  (* src = "serv/rtl/serv_top.v:56" *)
  wire ctrl_rd;
  (* src = "serv/rtl/serv_top.v:77" *)
  wire [2:0] funct3;
  (* src = "serv/rtl/serv_top.v:46" *)
  input i_dbus_ack;
  (* src = "serv/rtl/serv_top.v:45" *)
  input [31:0] i_dbus_rdt;
  (* src = "serv/rtl/serv_top.v:39" *)
  input i_ibus_ack;
  (* src = "serv/rtl/serv_top.v:38" *)
  input [31:0] i_ibus_rdt;
  (* src = "serv/rtl/serv_top.v:12" *)
  input i_rst;
  (* src = "serv/rtl/serv_top.v:13" *)
  input i_timer_irq;
  (* src = "serv/rtl/serv_top.v:70" *)
  wire imm;
  (* src = "serv/rtl/serv_top.v:67" *)
  wire jal_or_jalr;
  (* src = "serv/rtl/serv_top.v:66" *)
  wire jalr;
  (* src = "serv/rtl/serv_top.v:65" *)
  wire jump;
  (* src = "serv/rtl/serv_top.v:203" *)
  wire [1:0] lsb;
  (* src = "serv/rtl/serv_top.v:133" *)
  wire lui;
  (* src = "serv/rtl/serv_top.v:129" *)
  wire [3:0] mcause;
  (* src = "serv/rtl/serv_top.v:109" *)
  wire [1:0] mem_bytecnt;
  (* src = "serv/rtl/serv_top.v:108" *)
  wire mem_cmd;
  (* src = "serv/rtl/serv_top.v:106" *)
  wire mem_en;
  (* src = "serv/rtl/serv_top.v:111" *)
  wire mem_init;
  (* src = "serv/rtl/serv_top.v:112" *)
  wire mem_misalign;
  (* src = "serv/rtl/serv_top.v:58" *)
  wire mem_rd;
  (* src = "serv/rtl/serv_top.v:69" *)
  wire mret;
  (* src = "serv/rtl/serv_top.v:40" *)
  output [31:0] o_dbus_adr;
  (* src = "serv/rtl/serv_top.v:44" *)
  output o_dbus_cyc;
  (* src = "serv/rtl/serv_top.v:41" *)
  output [31:0] o_dbus_dat;
  (* src = "serv/rtl/serv_top.v:42" *)
  output [3:0] o_dbus_sel;
  (* src = "serv/rtl/serv_top.v:43" *)
  output o_dbus_we;
  (* src = "serv/rtl/serv_top.v:36" *)
  output [31:0] o_ibus_adr;
  (* src = "serv/rtl/serv_top.v:37" *)
  output o_ibus_cyc;
  (* src = "serv/rtl/serv_top.v:104" *)
  wire op_b;
  (* src = "serv/rtl/serv_top.v:103" *)
  wire op_b_source;
  (* src = "serv/rtl/serv_top.v:60" *)
  wire rd;
  (* src = "serv/rtl/serv_top.v:50" *)
  wire [4:0] rd_addr;
  (* src = "serv/rtl/serv_top.v:54" *)
  wire rd_alu_en;
  (* src = "serv/rtl/serv_top.v:101" *)
  wire rd_en;
  (* src = "serv/rtl/serv_top.v:55" *)
  wire rd_mem_en;
  (* src = "serv/rtl/serv_top.v:97" *)
  wire rf_ready;
  (* src = "serv/rtl/serv_top.v:98" *)
  wire rs1;
  (* src = "serv/rtl/serv_top.v:51" *)
  wire [4:0] rs1_addr;
  (* src = "serv/rtl/serv_top.v:99" *)
  wire rs2;
  (* src = "serv/rtl/serv_top.v:52" *)
  wire [4:0] rs2_addr;
  (* src = "serv/rtl/serv_top.v:100" *)
  (* unused_bits = "0" *)
  wire rs_en;
  (* src = "serv/rtl/serv_top.v:135" *)
  wire timer_irq_en;
  (* src = "serv/rtl/serv_top.v:71" *)
  wire trap;
  (* src = "serv/rtl/serv_top.v:68" *)
  wire utype;
  assign _00_ = o_ibus_cyc & (* src = "serv/rtl/serv_top.v:144" *) i_ibus_ack;
  assign _01_ = rd_alu_en & (* src = "serv/rtl/serv_top.v:252" *) alu_rd;
  assign _02_ = rd_mem_en & (* src = "serv/rtl/serv_top.v:254" *) mem_rd;
  assign _03_ = ! (* src = "serv/rtl/serv_top.v:213" *) _06_;
  assign _04_ = ! (* src = "serv/rtl/serv_top.v:214" *) mem_en;
  assign _05_ = rf_ready | (* src = "serv/rtl/serv_top.v:145" *) i_dbus_ack;
  assign _06_ = bufreg_hold | (* src = "serv/rtl/serv_top.v:213" *) o_dbus_cyc;
  assign _07_ = trap | (* src = "serv/rtl/serv_top.v:242" *) mret;
  assign _08_ = ctrl_rd | (* src = "serv/rtl/serv_top.v:252" *) _01_;
  assign _09_ = _08_ | (* src = "serv/rtl/serv_top.v:253" *) csr_rd;
  assign rd = _09_ | (* src = "serv/rtl/serv_top.v:254" *) _02_;
  assign op_b = op_b_source ? (* src = "serv/rtl/serv_top.v:256" *) rs2 : imm;
  assign _10_ = mem_misalign ? (* src = "serv/rtl/serv_top.v:335" *) bad_adr : bad_pc;
  assign _11_ = csr_d_sel ? (* src = "serv/rtl/serv_top.v:337" *) csr_imm : rs1;
  (* module_not_derived = 32'd1 *)
  (* src = "serv/rtl/serv_top.v:258" *)
  serv_alu alu (
    .clk(clk),
    .i_bool_op(alu_bool_op),
    .i_buf(bad_adr),
    .i_cmp_neg(alu_cmp_neg),
    .i_cmp_sel(alu_cmp_sel),
    .i_cmp_uns(alu_cmp_uns),
    .i_cnt_done(cnt_done),
    .i_en(alu_en),
    .i_init(alu_init),
    .i_op_b(op_b),
    .i_rd_sel(alu_rd_sel),
    .i_rs1(rs1),
    .i_rst(i_rst),
    .i_sh_right(alu_sh_right),
    .i_sh_signed(alu_sh_signed),
    .i_shamt_en(alu_shamt_en),
    .i_sub(alu_sub),
    .o_cmp(alu_cmp),
    .o_rd(alu_rd),
    .o_sh_done(alu_sh_done)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "serv/rtl/serv_top.v:207" *)
  serv_bufreg bufreg (
    .i_clk(clk),
    .i_clr(_04_),
    .i_cnt(cnt),
    .i_cnt_r(cnt_r),
    .i_en(_03_),
    .i_imm(imm),
    .i_imm_en(bufreg_imm_en),
    .i_loop(bufreg_loop),
    .i_rs1(rs1),
    .i_rs1_en(1'h1),
    .i_rst(i_rst),
    .o_lsb(lsb),
    .o_q(bad_adr),
    .o_reg(bufreg_out)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "serv/rtl/serv_top.v:317" *)
  serv_csr csr (
    .i_clk(clk),
    .i_cnt(cnt),
    .i_cnt_r(cnt_r),
    .i_csr_source(csr_source),
    .i_d(_11_),
    .i_mcause(mcause),
    .i_mcause_en(csr_mcause_en),
    .i_mepc_en(csr_mepc_en),
    .i_mie_en(csr_mie_en),
    .i_mip_en(csr_mip_en),
    .i_mscratch_en(csr_mscratch_en),
    .i_mstatus_en(csr_mstatus_en),
    .i_mtip(i_timer_irq),
    .i_mtval(_10_),
    .i_mtval_en(csr_mtval_en),
    .i_mtvec_en(csr_mtvec_en),
    .i_pc(o_ibus_adr[0]),
    .i_trap(trap),
    .o_q(csr_rd),
    .o_timer_irq_en(timer_irq_en)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "serv/rtl/serv_top.v:224" *)
  \$paramod\serv_ctrl\RESET_PC=8  ctrl (
    .clk(clk),
    .i_cnt(cnt),
    .i_cnt_done(cnt_done),
    .i_cnt_r(cnt_r),
    .i_csr_pc(csr_rd),
    .i_en(ctrl_en),
    .i_ibus_ack(i_ibus_ack),
    .i_jal_or_jalr(jal_or_jalr),
    .i_jalr(jalr),
    .i_jump(jump),
    .i_lui(lui),
    .i_offset(imm),
    .i_pc_en(ctrl_pc_en),
    .i_rs1(rs1),
    .i_rst(i_rst),
    .i_trap(_07_),
    .i_utype(utype),
    .o_bad_pc(bad_pc),
    .o_ibus_adr(o_ibus_adr),
    .o_ibus_cyc(o_ibus_cyc),
    .o_misalign(ctrl_misalign),
    .o_rd(ctrl_rd)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "serv/rtl/serv_top.v:137" *)
  serv_decode decode (
    .clk(clk),
    .i_alu_cmp(alu_cmp),
    .i_alu_sh_done(alu_sh_done),
    .i_ctrl_misalign(ctrl_misalign),
    .i_mem_misalign(mem_misalign),
    .i_mtip(i_timer_irq),
    .i_rf_ready(_05_),
    .i_rst(i_rst),
    .i_timer_irq_en(timer_irq_en),
    .i_wb_en(_00_),
    .i_wb_rdt(i_ibus_rdt),
    .o_alu_bool_op(alu_bool_op),
    .o_alu_cmp_neg(alu_cmp_neg),
    .o_alu_cmp_sel(alu_cmp_sel),
    .o_alu_cmp_uns(alu_cmp_uns),
    .o_alu_en(alu_en),
    .o_alu_init(alu_init),
    .o_alu_rd_sel(alu_rd_sel),
    .o_alu_sh_right(alu_sh_right),
    .o_alu_sh_signed(alu_sh_signed),
    .o_alu_shamt_en(alu_shamt_en),
    .o_alu_sub(alu_sub),
    .o_bufreg_hold(bufreg_hold),
    .o_bufreg_imm_en(bufreg_imm_en),
    .o_bufreg_loop(bufreg_loop),
    .o_cnt(cnt),
    .o_cnt_done(cnt_done),
    .o_cnt_r(cnt_r),
    .o_csr_d_sel(csr_d_sel),
    .o_csr_imm(csr_imm),
    .o_csr_mcause(mcause),
    .o_csr_mcause_en(csr_mcause_en),
    .o_csr_mepc_en(csr_mepc_en),
    .o_csr_mie_en(csr_mie_en),
    .o_csr_mip_en(csr_mip_en),
    .o_csr_mscratch_en(csr_mscratch_en),
    .o_csr_mstatus_en(csr_mstatus_en),
    .o_csr_mtval_en(csr_mtval_en),
    .o_csr_mtvec_en(csr_mtvec_en),
    .o_csr_source(csr_source),
    .o_ctrl_en(ctrl_en),
    .o_ctrl_jal_or_jalr(jal_or_jalr),
    .o_ctrl_jalr(jalr),
    .o_ctrl_jump(jump),
    .o_ctrl_lui(lui),
    .o_ctrl_mret(mret),
    .o_ctrl_pc_en(ctrl_pc_en),
    .o_ctrl_trap(trap),
    .o_ctrl_utype(utype),
    .o_funct3(funct3),
    .o_imm(imm),
    .o_mem_bytecnt(mem_bytecnt),
    .o_mem_cmd(mem_cmd),
    .o_mem_en(mem_en),
    .o_mem_init(mem_init),
    .o_op_b_source(op_b_source),
    .o_rd_alu_en(rd_alu_en),
    .o_rd_mem_en(rd_mem_en),
    .o_rf_rd_addr(rd_addr),
    .o_rf_rd_en(rd_en),
    .o_rf_rs1_addr(rs1_addr),
    .o_rf_rs2_addr(rs2_addr),
    .o_rf_rs_en(rs_en)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "serv/rtl/serv_top.v:295" *)
  serv_mem_if mem_if (
    .i_bytecnt(mem_bytecnt),
    .i_clk(clk),
    .i_cmd(mem_cmd),
    .i_en(mem_en),
    .i_funct3(funct3),
    .i_init(mem_init),
    .i_lsb(lsb),
    .i_rs2(rs2),
    .i_rst(i_rst),
    .i_trap(trap),
    .i_wb_ack(i_dbus_ack),
    .i_wb_rdt(i_dbus_rdt),
    .o_misalign(mem_misalign),
    .o_rd(mem_rd),
    .o_wb_cyc(o_dbus_cyc),
    .o_wb_dat(o_dbus_dat),
    .o_wb_sel(o_dbus_sel),
    .o_wb_we(o_dbus_we)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "serv/rtl/serv_top.v:281" *)
  serv_regfile regfile (
    .i_clk(clk),
    .i_go(i_ibus_ack),
    .i_rd(rd),
    .i_rd_addr(rd_addr),
    .i_rd_en(rd_en),
    .i_rs1_addr(rs1_addr),
    .i_rs2_addr(rs2_addr),
    .i_rst(i_rst),
    .o_ready(rf_ready),
    .o_rs1(rs1),
    .o_rs2(rs2)
  );
  assign o_dbus_adr = { bufreg_out[31:2], 2'h0 };
endmodule


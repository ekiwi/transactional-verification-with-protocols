################################################################################
##
## Filename:	Makefile
##
## Project:	Zip CPU -- a small, lightweight, RISC CPU soft core
##
## Purpose:	This makefile builds a verilator simulation of the zipsystem.
##		It does not make the system within Vivado or Quartus.
##
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
##
## Copyright (C) 2015-2017, Gisselquist Technology, LLC
##
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of  the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
##
## License:	GPL, v3, as defined and found on www.gnu.org,
##		http://www.gnu.org/licenses/gpl.html
##
##
################################################################################
##
##
.PHONY: all
all: zipsystem zipbones cpudefs.h div zipmmu cpuops pfcache

CORED:= core
PRPHD:= peripherals
EXD  := ex
VSRC := zipsystem.v cpudefs.v					\
		$(PRPHD)/wbdmac.v $(PRPHD)/icontrol.v		\
		$(PRPHD)/zipcounter.v $(PRPHD)/zipjiffies.v	\
		$(PRPHD)/ziptimer.v				\
	$(CORED)/zipcpu.v $(CORED)/cpuops.v $(CORED)/idecode.v	\
		$(CORED)/pipefetch.v $(CORED)/prefetch.v	\
		$(CORED)/pfcache.v				\
		$(CORED)/memops.v $(CORED)/pipemem.v		\
		$(CORED)/div.v					\
	$(EXD)/busdelay.v					\
		$(EXD)/wbdblpriarb.v $(EXD)/wbpriarbiter.v	\
	$(CORED)/idecode.v $(CORED)/cpuops.v
VZIP := zipbones.v cpudefs.v					\
	$(CORED)/zipcpu.v $(CORED)/cpuops.v $(CORED)/idecode.v	\
		$(CORED)/pipefetch.v $(CORED)/prefetch.v	\
		$(CORED)/pfcache.v				\
		$(CORED)/memops.v $(CORED)/pipemem.v		\
		$(CORED)/div.v					\
	$(EXD)/busdelay.v $(EXD)/wbdblpriarb.v		\
	$(CORED)/idecode.v $(CORED)/cpuops.v
VOBJ := obj_dir
SUBMAKE := $(MAKE) --no-print-directory --directory=$(VOBJ) -f
ifeq ($(VERILATOR_ROOT),)
VERILATOR := verilator
else
VERILATOR := $(VERILATOR_ROOT)/bin/verilator
endif
#
# Define VCOVERAGE to get coverage analysis of our test cases
# VCOVERAGE := --coverage
VCOVERAGE :=
VFLAGS := -Wall -MMD --trace $(COVERAGE) -cc -y $(CORED) -y $(PRPHD) -y $(EXD)


VERILATE=$(VERILATOR) $(VFLAGS)

$(VOBJ)/Vzipsystem.cpp: $(VSRC)
	$(VERILATE) zipsystem.v
$(VOBJ)/Vzipsystem.h: $(VOBJ)/Vzipsystem.cpp

$(VOBJ)/Vzipbones.cpp: $(VZIP)
	$(VERILATE) zipbones.v
$(VOBJ)/Vzipbones.h: $(VOBJ)/Vzipbones.cpp

$(VOBJ)/Vdiv.cpp: $(CORED)/div.v
	$(VERILATE) $(CORED)/div.v
$(VOBJ)/Vdiv.h: $(VOBJ)/Vdiv.cpp

$(VOBJ)/Vcpuops.cpp: $(CORED)/cpuops.v cpudefs.v
	$(VERILATE) $(CORED)/cpuops.v
$(VOBJ)/Vcpuops.h: $(VOBJ)/Vcpuops.cpp

$(VOBJ)/Vzipmmu.cpp: $(PRPHD)/zipmmu.v
	$(VERILATE) $(PRPHD)/zipmmu.v
$(VOBJ)/Vzipmmu.h: $(VOBJ)/Vzipmmu.cpp

$(VOBJ)/Vpfcache.cpp: $(CORED)/pfcache.v
	$(VERILATE) $(CORED)/pfcache.v
$(VOBJ)/Vpfcache.h: $(VOBJ)/Vpfcache.cpp

$(VOBJ)/Vzipsystem__ALL.a: $(VOBJ)/Vzipsystem.cpp $(VOBJ)/Vzipsystem.h
	$(SUBMAKE) Vzipsystem.mk

$(VOBJ)/Vzipbones__ALL.a: $(VOBJ)/Vzipbones.cpp $(VOBJ)/Vzipbones.h
	$(SUBMAKE) Vzipbones.mk

$(VOBJ)/Vdiv__ALL.a: $(VOBJ)/Vdiv.cpp $(VOBJ)/Vdiv.h
	$(SUBMAKE) Vdiv.mk

$(VOBJ)/Vcpuops__ALL.a: $(VOBJ)/Vcpuops.cpp $(VOBJ)/Vcpuops.h
	$(SUBMAKE) Vcpuops.mk

$(VOBJ)/Vzipmmu__ALL.a: $(VOBJ)/Vzipmmu.cpp $(VOBJ)/Vzipmmu.h
	$(SUBMAKE) Vzipmmu.mk

$(VOBJ)/Vpfcache__ALL.a: $(VOBJ)/Vpfcache.cpp $(VOBJ)/Vpfcache.h
	$(SUBMAKE) Vpfcache.mk

# $(VOBJ)/V%__ALL.a: $(VOBJ)/V%.cpp $(VOBJ)/V%.h
#	$(SUBMAKE) V%.mk

cpudefs.h: cpudefs.v
	@echo "Building cpudefs.h"
	@echo "// " > $@
	@echo "// Do not edit this file, it is automatically generated!" >> $@
	@echo "// To generate this file, \"make cpudefs.h\" in the rtl directory." >> $@
	@echo "// " >> $@
	@grep "^\`" $^ | sed -e '{ s/^`/#/ }' >> $@

.PHONY: zipsystem
zipsystem: $(VOBJ)/Vzipsystem__ALL.a cpudefs.h

.PHONY: zipbones
zipbones: $(VOBJ)/Vzipbones__ALL.a cpudefs.h

.PHONY: div
div: $(VOBJ)/Vdiv__ALL.a

.PHONY: cpuops
cpuops: $(VOBJ)/Vcpuops__ALL.a cpudefs.h

.PHONY: zipmmu
zipmmu: $(VOBJ)/Vzipmmu__ALL.a

.PHONY: pfcache
pfcache: $(VOBJ)/Vpfcache__ALL.a

.PHONY: clean
clean:
	rm -rf $(VOBJ) cpudefs.h

#
# Note Verilator's dependency created information, and include it here if we
# can
DEPS := $(wildcard $(VOBJ)/*.d)

ifneq ($(MAKECMDGOALS),clean)
ifneq ($(DEPS),)
include $(DEPS)
endif
endif
